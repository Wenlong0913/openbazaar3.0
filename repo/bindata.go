// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4d\x73\x1b\x37\xd2\xbe\xf3\x57\xf4\x21\xa9\xbc\x6f\x95\x3c\x14\x69\xeb\xcb\x5c\x6e\x15\x2d\xc9\x91\x12\x59\xe2\x4a\xf2\x47\x74\x03\x07\x3d\x1c\x2c\x31\xc0\x04\xc0\x90\x1a\x6f\x6d\x7e\xfb\x56\x37\x30\x43\x4a\x8e\xf7\x64\x57\x36\x3e\x44\xc2\x00\xe8\x46\x7f\x3c\xfd\x74\x6b\x02\x2f\xbe\xe9\x7f\x83\x09\x9c\x89\x20\xc0\x63\x08\xca\x2c\xfd\xe0\x9b\x0b\x18\x4c\xe0\xbe\x44\x90\xca\x61\x1e\xac\x6b\x21\x58\xf0\xc1\x3a\x04\xc9\x82\x9b\xbc\x04\xe1\x21\x94\x08\xb6\x46\xb3\x10\x9f\x85\x70\xfc\x6d\x21\x3c\xee\x81\xaa\x0b\x0f\x15\x06\x41\x4b\x7b\x20\x8c\x1c\x4c\xa0\x6e\x16\x5a\xe5\xbc\x2b\xeb\x04\x60\x21\x1a\x1d\x40\x79\xf8\x63\x98\xed\x5c\x65\x0d\xcc\x6f\xee\x2e\x3f\xc1\xcd\x1d\xfa\x3d\xf8\xe1\xea\xe6\x74\x76\x35\x9b\xcf\xcf\x66\xf7\xb3\xe1\x4d\x8d\xe6\x4d\xbf\xef\xa3\x32\xd2\x6e\xfc\xde\x60\x02\x7f\x0c\xaf\xd4\xc2\x09\xd7\x0e\x67\x75\xad\x55\x2e\x82\xb2\x06\xee\x9a\xba\xb6\x2e\x3c\x3b\xf6\x4e\xe4\x70\x73\xc7\xba\xc1\x0f\xa5\xad\x70\xf8\x44\xfc\x60\x02\x73\x2d\xcc\x49\x06\x70\x6e\xd6\xca\x59\x53\xa1\x09\xb0\x16\x4e\x89\x85\x46\x0f\xc2\x21\xe0\x63\x2d\x8c\x44\x09\xde\x92\x2d\x5a\xa8\x44\x0b\x0b\x84\xc6\xa3\xcc\x00\xae\x6f\xee\xcf\x5f\x77\xfa\x0d\x26\x80\x5f\xbd\x28\xb4\xb5\xca\x85\xd6\x2d\xfc\xf8\x61\x76\x7b\x39\x7b\x73\x75\xfe\xe3\x1e\x2c\x9a\x90\xae\x6d\x7c\xa0\x7b\x45\x9e\xa3\xf7\x28\x61\xa3\x42\x39\x98\xc0\x0f\xdd\x66\x28\xd1\x61\x06\x30\xd3\xde\xee\xc1\x1f\x64\xcf\x5e\xb7\x60\x9f\x9a\x6f\xc7\x66\xe4\x06\x72\x87\x54\x6e\xfa\xc4\xfe\x83\xc1\xb7\x8f\xa9\x09\x5c\x63\xd8\x58\xb7\xfa\xbe\x71\xfb\xde\x23\x04\xf4\xc1\x60\xa0\xe7\xa5\x1f\xa7\x23\xfe\x66\xd4\x1a\x9d\x17\x1a\xe6\xba\x59\xb2\xeb\xe7\x5a\xb4\xf0\x7f\xef\xe7\x66\xfe\xff\x20\x9a\x60\x2b\x11\x92\x27\xc8\x1a\x31\xc4\xb5\xf2\x01\x0d\x50\x10\x81\x5d\x04\xa1\x0c\xa9\x4e\x5f\xf0\x31\xa0\x33\x42\xc3\xe5\x1c\x84\x94\x0e\xbd\x87\xc2\xd9\x0a\x7c\x8c\x39\x94\x20\x71\xad\x72\xf4\x19\xdc\x97\xca\x83\xad\x39\x24\xa5\xf2\xd1\xf9\x8a\x95\x34\xb6\xa9\x4d\x1d\x75\xfc\xcd\x36\x1c\x46\xbe\xc6\x5c\x15\x2d\x58\x83\x60\x1d\x54\x94\x7c\x7e\x23\x5c\xd5\x09\x42\x4f\xae\x4d\xba\x59\x03\x85\x75\xa0\x4c\x6e\x2b\x65\x96\x60\xa2\xa9\x07\x13\xc8\xad\x31\x98\x93\x54\xd6\x01\x3d\xee\x5c\x40\x81\x4a\x81\xa5\x0c\x08\x58\x0b\xad\x24\x54\x8d\x0e\x8a\x76\xd0\x85\x95\x60\xfd\x58\x2e\xad\x4d\x87\xaa\x7e\x35\xdc\xcf\xf8\xdf\x30\xe4\xf5\xf0\xd5\xfe\xfe\xe8\xf9\x8e\xc3\xe1\xeb\xd7\x5f\xfd\xf8\xf4\xf8\xc9\xfe\xfe\xc1\x90\x93\xe3\xcf\x6f\xe8\xbe\x27\xbc\x58\x8a\x80\x1b\xd1\xf6\xb6\x66\x65\x6b\x8d\x8f\xe8\x61\x61\x43\xc9\x4e\xb9\x9c\xbf\xbd\xeb\x77\xce\xe6\x97\xec\xe7\xa7\x50\x35\x98\xf0\x07\xbb\x46\xc7\x5f\xbc\xa8\x7a\xb3\xb0\x95\x76\x24\xf8\x32\x59\xe8\xeb\xf6\x49\xc2\xb6\x4f\x1c\x8d\x8f\xf8\x91\xa3\xce\x0c\x63\x7a\xc1\x1b\x6b\x83\x0f\xa2\xde\x71\x00\x25\x3f\x3b\x21\x58\xf8\xa7\x55\x86\xb5\x49\xce\xcb\xe0\xc6\x80\x0f\xc2\x85\xb8\x6a\x25\xc2\x46\x69\x0d\x95\x58\xe1\x60\x02\xb6\x09\x4b\x4b\xce\xde\x71\x31\xdd\x43\x9b\x17\x2c\xca\x89\x1a\x6a\x44\xe7\xd9\x04\x0d\x65\x46\x89\x15\xed\x91\xca\xe7\xfc\x7a\x1b\x4a\x24\x73\xc4\x6d\xcf\x14\x18\x4c\xb6\x17\x6d\x1f\xf7\x98\xf1\xbf\xde\xc3\xc3\x7a\x5c\x0f\x47\xe3\xb3\x97\xbf\x5a\xfb\xf1\xd7\xab\xea\xc3\xd9\xe7\x43\x2f\x3f\xbf\x6b\x3f\x8d\xda\x7f\xd4\xe7\xf2\xf4\xe2\xcd\x91\x0c\x8f\xed\xb9\x3b\x19\x6d\xe6\x6f\xaf\xed\xe9\xa7\x73\x3f\x2e\x57\x6b\xb2\xc9\x1d\x57\x15\x52\xaf\xb0\x6e\x23\x9c\x04\x8f\x6e\xcd\x2a\xef\x98\xc6\x61\x8e\x6a\x8d\x50\xa1\xf7\x62\x89\x1e\x36\x25\x05\x7d\x51\x68\x65\x30\x83\x39\xa2\xbb\x3c\xe3\x28\xe2\xac\x51\x28\x19\x11\xa3\xb9\x16\x48\x88\xd3\xbd\xad\x76\xb6\x50\x3a\x8a\xe4\xc7\xb3\x61\x7d\xdc\x1a\x6b\x5c\x27\x65\x30\x61\xa0\x8d\x46\x53\x45\xc4\xe2\x5c\x18\x63\x43\x67\xf3\x68\x6f\xe5\xf9\x92\x2e\xbf\x76\x5f\x10\x48\xd1\xdf\x1b\x74\x2d\x25\xfc\x60\xd2\x07\xe3\xd6\x9d\xd2\x6e\x8c\xb6\x42\x6e\x5f\xc7\x10\x42\x52\xb3\xc1\xc4\x9b\x22\xde\x37\xed\x4c\x7c\xb6\x5a\xdf\x9f\x9b\xdb\x5f\x36\xe5\xe7\x13\x75\xbe\x39\x7e\x53\xdc\xba\x83\x5c\x9c\xb5\x3f\x9f\x7c\xc8\xcf\x97\xf5\xe3\xfb\x77\xd5\xb8\xa8\x67\xbf\xf8\x93\x5f\xbe\x0f\x8e\x93\xea\x77\x09\xc4\xe1\x05\xe7\x4b\x61\xb5\xb6\x1b\x8a\xc6\x08\x71\xdf\x8f\x94\x98\xa6\x5a\x50\xe0\x16\xe0\xd0\xd7\xd6\x24\x20\xdc\x08\x15\x18\x03\x39\x34\x2a\xb1\x22\x5d\x2e\xe7\xd7\x77\x6c\x7d\xd5\x23\xb0\xf2\x20\x20\x38\x21\xd1\x16\x05\x05\x38\x86\x0d\x62\x8c\x0d\x91\xe7\x8d\x13\x79\x4b\x97\xd3\xef\xec\xb7\xde\x63\xbe\x46\x94\x94\x13\xaa\x36\xfe\xf7\xc6\xba\xa6\x9a\x72\x5e\x13\x94\xbc\xbf\xbd\x22\x2d\x28\xc7\x48\x09\x7c\xcc\x4b\x61\x96\x08\x4e\x04\x12\xfd\x8e\x2a\x78\x6e\x0d\x61\x46\x97\xa3\x6f\x54\xc8\xad\x32\xb3\x35\x3a\xb1\xc4\x1d\x38\xe9\x0e\xd3\xd9\xda\xd9\xb5\x92\xe8\xa6\x65\x08\xb5\x7f\x3d\x1c\x06\x95\xaf\xd0\xed\xd4\xea\xcc\xba\xe5\x50\xd4\x8a\x34\x39\x8b\x75\x05\x84\xd6\xb0\x43\x77\x1c\x6a\x41\xb5\xa8\x68\x0c\xc3\x84\xd0\x2a\xb4\x24\x06\xeb\xb0\x85\x4c\x8e\x48\x7a\x6c\xfc\x2d\x62\x80\x32\xcb\xf8\xe4\xc2\x5b\xa3\xdb\x58\xa3\x66\x75\x8d\x46\x82\x80\xdc\x56\xcc\x66\xd2\x8b\x1a\x8f\x0e\xc4\x92\x56\xba\x6c\xdb\x72\xbe\x2d\x9b\xcc\x06\x93\x46\xa4\xa3\xd3\xf4\xff\xef\x12\xa8\xe4\x98\xbf\x24\x4e\xbb\x22\xbe\x51\xbe\x24\xe3\xa0\x61\xb7\xdc\xdd\x5d\x51\xa5\x26\xc3\x90\x6a\x5b\xdc\xde\xc6\x66\xa9\x96\x65\xd0\x2d\x21\x1e\x1b\x46\x22\x51\x67\x55\x40\x6b\x1b\x06\x14\xd7\x18\x43\xea\x73\x44\x32\x30\xd0\x95\x02\x1c\x56\x36\x20\x54\x22\x2f\x95\x41\x62\xe7\x85\x50\xba\x21\x08\x8a\x61\x49\xc2\x09\x6f\x08\x83\xc8\x06\x20\x4c\x4b\xe4\x22\xd8\x5d\x30\x23\xff\xe7\xd6\x04\x67\x35\x89\x8c\xe8\xb8\x47\xc4\x42\x37\x92\xe4\x4a\x27\x54\xaf\xc0\x46\x68\x1d\x79\x96\xf7\x3a\xc6\xc6\xfd\x56\x1a\xa9\xcc\x08\x67\x30\xc2\xb8\xd0\xde\xf6\xc4\x86\xc3\x43\x84\x92\xb3\xb7\x2f\xde\x39\xba\xc0\x4a\xac\xb0\x05\x02\x6a\x72\x10\x65\x14\x2b\x43\x5f\x55\x41\xc4\x1e\x93\x50\x5a\xa1\x6d\xd3\x21\xdd\x35\x0c\x76\xe8\xbd\xce\x68\x35\x7e\x5f\x61\xfb\xe5\xe7\x15\xb6\x1d\x9a\x6c\xe3\x21\xa1\x35\x2c\x84\x57\x39\x71\xc1\x12\x72\x87\x12\x4d\x50\x42\x7b\xd6\xa1\x73\x5c\x72\x47\xe7\xdd\xc6\x33\xb0\x37\x84\xf5\x21\x75\x1d\x19\x5c\x93\x3b\x42\x29\x02\xef\x65\x0a\x4f\x86\xe1\x97\x92\x75\x66\xd7\x67\xcf\xce\xd0\x5d\xb5\xb3\x01\x73\x52\xbe\x77\x69\xf4\x72\x06\x97\xe1\x27\x1f\x4d\x48\x41\xb2\x1b\x23\x5b\x31\x24\xe1\xd9\xa5\xb8\x46\xea\x66\xac\x01\x6d\x73\xa1\x4b\xeb\x43\x14\x44\x1f\x42\xaa\x81\xb5\xb3\x4b\x27\xaa\x54\x7a\x62\x9f\xd1\x39\x79\x36\xbf\xe4\x7e\x4d\xac\xa8\x6a\x75\x8f\xea\x6c\x51\x0b\xef\x37\xd6\x11\x8d\xa4\xa0\xea\x5a\x15\xfa\x5c\xe2\x23\xa0\xc9\x2d\x75\x21\x77\x17\xb3\xf1\xc1\x21\x94\xc2\x97\x60\x8b\x44\x9f\x45\x1e\x1a\xa1\xfb\x2b\xb6\x59\x20\x53\x60\x26\x6b\xa4\x58\x49\x82\x36\x25\xd5\x6f\x15\xc0\xab\xe0\xb9\xce\x53\x86\xc4\xb4\x22\x88\x55\x4b\x0e\x9c\x0c\x3e\x52\x25\x60\xe3\x93\xea\xc2\xb0\xbe\x0e\x7f\x6f\xd0\x87\x6d\x70\xd2\xbd\xdd\xf1\xc6\xbc\x20\x0d\x39\xe7\x7a\x79\x1d\xfe\xb3\xee\x1d\xa3\xc8\x6d\x55\x0b\x17\xc3\xba\xff\xe8\xc5\x3a\x31\x8f\x6c\x30\x11\xb5\x22\x3c\x34\xa2\xc2\xa9\xd0\x2a\x47\x5e\xea\x6e\x9d\x1e\xe0\xf1\xf1\xab\xe3\x93\x63\x29\xc6\xc7\xfb\xaf\x8e\x46\x07\x23\xb9\x8f\x07\x87\xc5\xb1\xcc\x0f\xc7\x27\xe3\xa3\xa3\x97\x87\xfb\x2f\xe5\xbe\x3c\x14\x62\xb1\x90\xf2\x70\x2c\x46\x23\x2c\x8e\xc6\x23\x39\x3a\x78\x35\x96\xc7\x8c\xc3\x44\xec\x40\x68\x6e\x42\x02\x11\x24\x4a\xa5\x6d\xfc\xd2\x1b\x73\x61\x38\x2a\x72\x6b\x57\x8a\xa3\x1b\xe5\x17\xb1\x7a\x5f\x92\x0d\x6b\xa7\x2a\xe1\xda\xb8\x5d\xa4\x4a\x16\x92\x4b\xe8\xe7\x3e\x4a\x38\x02\xd2\x6f\x7d\xc3\xb4\xa5\xaa\x31\x62\xc9\xc9\x4f\x5d\x48\x91\x04\x1f\x11\xa4\xa5\x40\xda\x89\xdf\x18\x08\x74\x47\x44\xeb\x28\x75\x2d\x74\x83\xd1\x35\xca\x27\xd7\x52\xc5\x6e\x02\x95\x55\x0e\x5b\x11\xc3\x54\xa5\x82\xe3\x6c\xb3\x4c\x38\x62\xab\x8a\x1c\x47\x04\xb1\x83\xfa\x38\xb2\x88\xcf\x21\xf9\xbd\xab\x23\x94\xb5\xcf\xd3\xbf\x8f\x00\xe5\xa3\x3f\xa3\x0d\xa7\xbf\x7d\xba\x5e\x3d\x54\x6f\x3f\x3f\xfc\xfc\xb6\x7a\xb8\xb8\x2e\x1f\x2e\xae\xab\xed\xda\x43\x99\x8f\x6f\xab\x87\xea\xed\xea\x61\x39\x9d\x26\x48\xdc\x94\x2a\x20\xf5\x6a\x1d\x43\xcd\x77\x5a\x46\xf4\x7b\x50\xc7\x5e\xbf\xea\xa3\x87\x60\x09\xa5\xaa\xa7\xe3\xe3\xec\xd5\x41\x76\x78\x94\x8d\x8e\x0e\x76\xd7\x5f\x8e\xb3\xf1\xcb\x93\x6c\xb4\x7f\x92\x8d\x0e\x18\x7a\x4f\x6f\x6e\xef\xb8\xf5\xe7\x6a\x23\x61\xd1\x76\x03\x96\x8c\x74\x48\x4d\x27\x93\xe1\xf0\x04\xfa\x82\x85\x42\x68\x4f\x72\x8d\xcd\xad\xf3\x11\xca\x2f\x9f\xc2\x5c\xac\x1a\x3d\xdb\xe5\x58\x4b\x14\x5d\x10\xa9\x4a\xb5\x9e\x88\x4a\xd7\x11\xed\xa5\xa6\x43\x11\x8a\xa7\xde\x97\xbc\xa2\x42\xa2\xbe\x1d\x5f\x61\xc0\x49\x42\x38\x4d\xd1\xc8\xda\x2a\x13\x88\xea\xab\xbc\xec\x76\x70\x27\x2c\x55\xd1\x0e\x26\x1d\x89\xfe\x89\xb2\x37\xb5\xe1\x3e\x88\x10\x39\x0c\x5f\x4f\x8c\x25\xa9\x5d\x60\xa0\xc2\xb8\x8c\x54\x84\x82\x39\x91\xff\x34\x93\xe0\x26\x20\x1b\x4c\xe2\x23\x92\xfa\xd1\x0c\xdf\x98\x1e\x4c\xe0\x23\x57\xcd\xbf\x86\x99\x9c\x47\x26\xf2\xd4\xff\xb1\x8c\xc7\x1c\x27\x87\x29\xb3\xc3\x1e\xb9\x0d\x15\xa6\xed\x9c\x25\xbb\xed\xdc\x1e\x45\x34\xa4\x4a\x45\xd0\xd7\x35\x2e\xec\xae\x9a\x28\x67\xde\x38\x87\x26\x57\xe8\xa9\x02\xa1\xc8\x4b\x1e\x59\x30\xad\x4c\x71\x1a\xaf\x9b\xbe\x39\xbd\x18\x4c\x9e\x2d\xdd\x9f\x3e\x5f\xba\xfa\x72\xe9\xe1\xfc\x8b\xa5\xf3\xfb\x8b\xef\xe2\xb9\xd8\xad\xce\x8c\x84\xb7\xa9\x5b\xbd\x8b\x14\xec\xaf\xf3\x65\xcf\x05\x49\xb5\x17\xc2\xc8\x17\x4f\x1b\xe9\xe8\xa3\x3f\xc9\x5d\x5b\x14\xe8\x52\xc7\x1b\x07\xb4\xbb\x07\x55\x8e\xfd\x30\x61\x3b\x8f\x78\xde\x2f\x2f\x10\x62\x38\x59\xa8\x1b\x5f\x6e\x3b\x58\xca\xc8\xc4\x5d\x39\xd7\x62\xa7\xbe\x33\x8c\x08\xa5\xf5\xf8\x95\xab\x1c\x06\xa7\x70\x1d\xa3\xf4\x69\xcb\x4f\x2d\x38\x0f\xb5\x2a\x42\xea\x7c\x45\x29\xce\x23\x80\xc4\xb6\xba\x06\xaf\xb6\x1b\x74\xb1\x1f\x49\x25\x25\x83\xdb\x9e\x39\x2b\xdf\x19\xc7\x97\xb6\xd1\x5c\x02\xfa\x09\xec\x02\x23\xfd\x60\x56\xbd\xb0\x8f\x71\x06\x20\x40\xdb\x40\x7d\x61\xbc\x99\x9e\x40\xa6\xa3\xc6\x4d\xf8\x44\x32\xf8\x2c\xad\x2a\xb3\x64\x02\xb7\xb4\x56\x82\x44\xa1\xe9\x60\x9a\x7b\xc7\x40\xdd\xe9\xea\xfb\x29\xc8\x9f\x38\x2f\xce\x10\x7a\x13\x23\xbb\x33\x94\x31\x8f\x22\x80\x75\xbc\xb4\x6e\x5c\x4d\x26\xe5\xbe\x38\x0d\xbf\x59\x0d\x96\xfb\x1c\xcb\xb7\x57\x51\x66\xc7\x9b\x3a\x91\x1d\x6b\x40\x42\x55\xba\x5b\xb9\xb8\xff\xf2\xcc\x77\xe5\xc9\x9b\x82\x96\xfe\x77\x66\x12\x67\xb8\x68\x96\xdf\x25\xcb\xf8\x66\xd0\x76\xb9\xa4\xe0\xd1\xb8\x46\x4d\x74\xf8\x03\x4f\x03\xf9\xd7\xe8\xa5\x7f\x49\xda\x48\xad\x52\x61\xf7\x88\x5f\xa8\x1c\xf7\x60\x23\x1c\x05\xdd\x1e\xa0\x73\xd6\xed\x41\xee\x14\xf3\xa5\x7f\x0f\x26\x74\x27\x9f\x9f\xd2\x91\xff\xf2\x37\x17\x6d\x97\x7d\x2b\xa4\xed\xf2\x8b\x69\xfd\x50\xdb\x65\x3f\x22\xe5\x29\x75\x37\x37\x4b\xd3\x61\x8a\x91\x8b\xfb\xfb\x79\x3f\xfc\x4a\x24\xd8\x67\x10\xcf\xa4\xe5\x1d\xc4\xe0\xc9\xc8\x16\xf2\x79\xfa\xb5\x9d\x5f\x27\x02\xd5\x4f\xdb\x9e\xdd\xa3\x4c\x1c\x66\xd0\x56\x8a\xa4\x05\xf7\x47\xdd\x1f\x2f\x44\x60\x8e\xf0\x7a\x38\xec\x1b\x92\xd7\x7f\x4b\x47\x49\xfb\xbf\x0f\xd9\x92\xc3\x9a\xd6\xc0\x9a\xbc\x6f\x7a\x33\x26\xa9\xbc\x71\x7a\xb8\x7f\xc8\xa9\xf3\xd1\xa9\x80\x70\x3a\x7f\xdf\x4b\x4f\xa8\xb5\x1d\x05\x72\x37\x40\xa8\x51\x37\xdd\xe9\x61\xa8\xea\x9d\x3f\xf8\x64\xb4\xfe\x9f\x00\x00\x00\xff\xff\x85\x2b\xe9\x3f\xa7\x1b\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 7079, mode: os.FileMode(420), modTime: time.Unix(1575675758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

