// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x5d\x53\xdc\xb8\x12\x7d\xf7\xaf\xe8\x87\xa4\xea\xde\xaa\xc9\x18\x48\x2e\x14\xf8\x72\xab\x86\x8f\x54\x48\x26\xe0\x9b\x81\xc0\x3e\xca\x72\x8f\xad\x20\xab\x85\x24\x8f\x31\x5b\x9b\xdf\xbe\xd5\x1a\xcf\x30\x64\x37\xfb\xb0\x05\xb5\xcc\x0b\x96\xfa\x4b\xe7\x9c\x6e\x29\x83\x37\xcf\xfa\x97\x64\x70\x22\x82\x00\x8f\x21\x28\x53\xf9\xe4\xd9\x13\x24\x19\x5c\xd6\x08\xa5\x72\x28\x03\xb9\x1e\x02\x81\x0f\xe4\x10\xca\x98\xb8\x95\x35\x08\x0f\xa1\x46\x20\x8b\xa6\x10\x0f\x42\xb8\xb8\x57\x08\x8f\x23\x50\x76\xee\xa1\xc1\x20\x78\x69\x04\xc2\x94\x49\x06\xb6\x2d\xb4\x92\xd1\x6a\xbc\x4a\x80\x73\xd1\xea\x00\xca\xc3\xf7\x74\xbc\x11\x8a\x0c\xe4\x17\xb3\xb3\x1b\xb8\x98\xa1\x1f\xc1\xab\xe9\xc5\xf1\x64\x3a\xc9\xf3\x93\xc9\xe5\x24\xbd\xb0\x68\x8e\xd6\x76\xd7\xca\x94\xd4\xf9\x51\x92\xc1\xf7\x74\xaa\x0a\x27\x5c\x9f\x4e\xac\xd5\x4a\x8a\xa0\xc8\xc0\xac\xb5\x96\x5c\xf8\xc1\xed\xb3\x90\x70\x31\x8b\xb5\xc1\xab\x9a\x1a\x4c\x9f\xa4\x4f\x32\xc8\xb5\x30\xfb\x63\x80\x53\xb3\x50\x8e\x4c\x83\x26\xc0\x42\x38\x25\x0a\x8d\x1e\x84\x43\xc0\x7b\x2b\x4c\x89\x25\x78\x62\x2c\x7a\x68\x44\x0f\x05\x42\xeb\xb1\x1c\x03\x9c\x5f\x5c\x9e\x1e\xac\xea\x4b\x32\xc0\x9f\x06\x0a\xbd\x55\x52\x68\xdd\xc3\xeb\xaf\x93\x2f\x67\x93\xa3\xe9\xe9\xeb\x11\x14\x6d\x18\xc2\xb6\x3e\x70\x5c\x21\x25\x7a\x8f\x25\x74\x2a\xd4\x49\x06\xaf\x56\xc6\x50\xa3\xc3\x31\xc0\x44\x7b\x1a\xc1\x77\xc6\x73\x5d\x5b\xa0\xa7\xf0\x6d\x60\xc6\x34\x30\x1d\xa5\x72\x87\x4f\xf0\x4f\x92\xe7\xd7\x54\x06\xe7\x18\x3a\x72\xb7\x2f\xab\xdb\x2b\x8f\x10\xd0\x07\x83\x81\x8f\x37\xfc\x7b\xb8\x1d\xf7\x8c\x5a\xa0\xf3\x42\x43\xae\xdb\x2a\x52\x9f\x6b\xd1\xc3\xbf\xae\x72\x93\xff\x1b\x44\x1b\xa8\x11\x61\x60\x82\xd1\x58\x4a\x5c\x2b\x1f\xd0\x00\x8b\x08\xa8\x08\x42\x19\x2e\x9d\x77\xf0\x3e\xa0\x33\x42\xc3\x59\x0e\xa2\x2c\x1d\x7a\x0f\x73\x47\x0d\xf8\xa5\xe6\xb0\x84\x12\x17\x4a\xa2\x1f\xc3\x65\xad\x3c\x90\x8d\x92\x2c\x95\x5f\x92\xaf\x62\x91\x86\x5a\x6b\xec\xb2\xc6\x5f\xa8\x8d\x32\xf2\x16\xa5\x9a\xf7\x40\x06\x81\x1c\x34\xdc\x7c\xbe\x13\xae\x59\x25\x42\xcf\xd4\x0e\xb5\x91\x81\x39\x39\x50\x46\x52\xa3\x4c\x05\x66\x09\x75\x92\x81\x24\x63\x50\x72\xd6\x58\x03\x7a\xdc\x08\xc0\x42\x65\x61\x29\x03\x02\x16\x42\xab\x12\x9a\x56\x07\xc5\x16\x1c\xb0\x11\xb1\xbe\x98\x97\xd7\x0e\x53\x65\xdf\xa5\x5b\xe3\xf8\x4b\x83\xb4\xe9\xbb\xad\xad\xed\x1f\x2d\x76\xd3\x83\x83\x9f\x6e\x3e\x75\xdf\xdf\xda\xfa\x4f\x1a\x9b\xe3\xcf\x23\xac\xf6\x87\x79\x51\x89\x80\x9d\xe8\xd7\x58\xc7\x62\xad\xc6\x7b\xf4\x50\x50\xa8\x23\x29\x67\xf9\xfb\xd9\xda\x72\x92\x9f\x45\x9e\x9f\x8e\xaa\x24\x8b\x1b\xb4\x40\x17\x77\xbc\x68\xd6\xb0\x44\x94\x36\x32\xf8\x7a\x40\xe8\xe7\xf8\x0c\xc9\x1e\x8f\xb8\xbd\xb3\x17\x0f\xb9\xbd\x82\x61\x87\x4f\x70\x44\x14\x7c\x10\x76\x83\x00\x6e\xfe\x48\x42\x20\xf8\x46\xca\xc4\x6a\x06\xf2\xc6\x70\x61\xc0\x07\xe1\xc2\x72\x95\x4a\x84\x4e\x69\x0d\x8d\xb8\xc5\x24\x03\x6a\x43\x45\x4c\xf6\x06\xc5\x1c\x87\x8d\x8b\x98\xca\x09\x0b\x16\xd1\xf9\x08\x41\xcb\x9d\x51\x63\xc3\x36\xa5\xf2\x32\x9e\x9e\x42\x8d\x0c\xc7\xd2\xec\x87\x02\x92\xec\x31\xd0\xe3\xe1\xee\xc7\xf1\xb7\x66\x38\xb5\x3b\x36\xdd\xde\x39\x79\xfb\x89\xe8\xfa\xd3\xb4\xf9\x7a\xf2\xb0\xeb\xcb\x87\xcf\xfd\xcd\x76\xff\x7f\x7b\x5a\x1e\x7f\x38\xda\x2b\xc3\x7d\x7f\xea\xf6\xb7\xbb\xfc\xfd\x39\x1d\xdf\x9c\xfa\x9d\xfa\x76\xf1\x37\xc2\x4f\x8b\xcb\xa3\xc5\xfe\xde\x74\xf7\xdb\x42\x4c\x6f\xcb\xd9\x17\x7b\x57\x1f\xdf\xbc\xed\xf6\xf2\x3e\x3f\xb9\xbe\xda\xbb\xed\x3e\xfa\x4f\x1f\xfb\x87\x30\xb9\x3a\x7f\x99\x19\xc6\x2c\xcc\x86\x01\x06\x6f\xa2\x56\xe6\xa4\x35\x75\xcc\xc4\xb2\xbd\x5f\xee\x42\x36\x6d\x53\x30\x69\x73\x70\xe8\x2d\x99\x61\x08\x74\x42\x85\xd8\xff\x5d\x8d\x86\xe5\xc1\xb5\x9c\xe5\xe7\x33\xb8\x6b\xd1\xa9\xf5\xf4\x51\x1e\x04\x04\x27\x4a\xa4\xf9\x9c\xd1\xc7\xd0\x21\x2e\x39\x17\x52\xb6\x4e\xc8\x9e\x83\xf3\x37\x7b\xf6\xeb\xd6\xf1\x16\xb1\x64\x3d\x28\x6b\xfc\x5d\x4b\xae\x6d\x0e\xa3\xa6\xb9\x8d\xae\xbe\x4c\xb9\x0a\xd6\x17\x17\x81\xf7\xb2\x16\xa6\x42\x70\x22\x70\xea\xcf\x7c\x7b\x49\x32\xdc\x2f\x2b\x7d\x1e\xa9\x20\x49\x99\xc9\x02\x9d\xa8\x70\xa3\x95\x56\xce\xec\x6b\x1d\x2d\x54\x89\xee\xb0\x0e\xc1\xfa\x83\x34\x0d\x4a\xde\xa2\xdb\xb8\xa7\xc6\xe4\xaa\x54\x58\xf5\x22\x54\x5f\x0b\xad\x31\xfc\x33\x64\x3f\x73\xc4\x0c\x4e\xb0\x68\xab\x17\x29\x35\x46\x06\x4d\x55\xc5\xa0\x68\x5c\xa0\x66\x22\xbf\xc6\x69\x19\x3f\x97\x63\xee\xd7\x92\x0d\x47\xa0\xcc\x9c\x46\x60\x28\x28\x89\x23\xe8\x84\x33\xca\x54\x23\x40\xe7\xc8\x8d\x40\x3a\x15\x2f\xe0\xdf\x92\x8c\x63\x46\xff\x43\x76\xf9\x8b\x37\xa9\xa6\x0a\xe6\x4a\xa3\x5f\xfa\xfc\xe1\x35\x93\x6a\xaa\xd6\x57\x48\xbc\xc5\x57\x23\x77\xb8\x3d\x59\xb5\x1f\x2e\x2f\x73\xb0\x8e\x38\x10\x38\xbc\x6b\xd1\x07\x3f\x86\xa5\xcf\xb0\xec\xd1\xf1\xcc\xe4\x21\x1c\xbb\x67\x75\x8f\x97\xa0\xb8\x69\x1e\xef\x77\xe5\xf9\x80\xc3\x1d\xae\xe2\x63\x70\x33\x8e\x32\x4b\xc1\xb3\xa9\x14\x06\x0a\x1e\xe7\xeb\xc7\x9d\x08\xc0\x82\x3f\x48\x53\x4d\x52\xe8\x9a\x7c\x38\xf8\xef\xe0\xca\xd5\xff\x2f\x8d\x48\xa6\x96\xd7\x80\x8c\x44\x70\xad\x61\x14\x19\xf7\xc1\xf0\x70\x77\x6b\x37\xbe\x27\xae\x9d\x0a\x08\xc7\xf9\xd5\x3a\xfb\xd0\x82\xeb\xe2\x22\x76\xec\x2a\x6d\xbb\xf2\x4e\x43\x63\x37\x1e\xc4\x63\x5e\xff\x3d\x00\x00\xff\xff\xce\xcd\x40\x93\xc7\x0c\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 3271, mode: os.FileMode(436), modTime: time.Unix(1573272871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

