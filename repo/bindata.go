// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x73\x1b\xb7\x92\x7e\xe7\xaf\xe8\x87\xa4\xb2\x5b\xc5\x0c\x45\xda\xba\x99\xcb\xad\xa2\x2e\x8e\x94\xc8\x12\xd7\x92\x2f\xd1\x1b\x88\xe9\xe1\x60\x89\x01\x26\x00\x86\xd4\xf8\xd4\xc9\x6f\x3f\xd5\x0d\xcc\x90\x92\x4f\xce\x93\x5d\x89\x1f\x22\x02\x18\x74\xa3\xfb\xc3\xd7\x5f\x63\x0a\x3f\x7f\xd3\xff\x06\x53\xb8\x10\x41\x80\xc7\x10\x94\x59\xf9\xc1\x37\x37\x30\x98\xc2\x43\x89\x90\x2b\x87\x32\x58\xd7\x42\xb0\xe0\x83\x75\x08\x39\x1b\x6e\x64\x09\xc2\x43\x28\x11\x6c\x8d\x66\x29\xbe\x08\xe1\x78\x6e\x29\x3c\x0e\x41\xd5\x85\x87\x0a\x83\xa0\xa1\x21\x08\x93\x0f\xa6\x50\x37\x4b\xad\x24\xaf\xca\x3a\x03\x58\x88\x46\x07\x50\x1e\xfe\x1c\x65\x7b\x5b\x59\x03\x8b\xbb\xfb\xeb\xcf\x70\x77\x8f\x7e\x08\x3f\xdc\xdc\x9d\xcf\x6f\xe6\x8b\xc5\xc5\xfc\x61\x3e\xba\xab\xd1\x9c\xf5\xeb\x3e\x29\x93\xdb\xad\x1f\x0e\xa6\xf0\xe7\xe8\x46\x2d\x9d\x70\xed\x68\x5e\xd7\x5a\x49\x11\x94\x35\x70\xdf\xd4\xb5\x75\xe1\xc5\x67\xef\x84\x84\xbb\x7b\xf6\x0d\x7e\x28\x6d\x85\xa3\x67\xe6\x07\x53\x58\x68\x61\x4e\x33\x80\x4b\xb3\x51\xce\x9a\x0a\x4d\x80\x8d\x70\x4a\x2c\x35\x7a\x10\x0e\x01\x9f\x6a\x61\x72\xcc\xc1\x5b\x8a\x45\x0b\x95\x68\x61\x89\xd0\x78\xcc\x33\x80\xdb\xbb\x87\xcb\x37\x9d\x7f\x83\x29\xe0\x5f\x6e\x14\xda\x5a\x49\xa1\x75\x0b\x3f\x7e\x9c\xbf\xbf\x9e\x9f\xdd\x5c\xfe\x38\x84\x65\x13\xd2\xb6\x8d\x0f\xb4\xaf\x90\x12\xbd\xc7\x1c\xb6\x2a\x94\x83\x29\xfc\xd0\x2d\x86\x12\x1d\x66\x00\x73\xed\xed\x10\xfe\xa4\x78\xf6\xbe\x05\xfb\x3c\x7c\x7b\x31\xa3\x34\x50\x3a\x72\xe5\x66\xcf\xe2\x3f\x18\x7c\x7b\x4c\x4d\xe1\x16\xc3\xd6\xba\xf5\xf7\xc5\xed\x07\x8f\x10\xd0\x07\x83\x81\x8e\x97\xfe\x9c\x8d\x79\xce\xa8\x0d\x3a\x2f\x34\x2c\x74\xb3\xe2\xd4\x2f\xb4\x68\xe1\xbf\x3e\x2c\xcc\xe2\xbf\x41\x34\xc1\x56\x22\xa4\x4c\x50\x34\x22\xc4\xb5\xf2\x01\x0d\x10\x88\xc0\x2e\x83\x50\x86\x5c\xa7\x19\x7c\x0a\xe8\x8c\xd0\x70\xbd\x00\x91\xe7\x0e\xbd\x87\xc2\xd9\x0a\x7c\xc4\x1c\xe6\x90\xe3\x46\x49\xf4\x19\x3c\x94\xca\x83\xad\x19\x92\xb9\xf2\x31\xf9\x8a\x9d\x34\xb6\xa9\x4d\x1d\x7d\xfc\xdd\x36\x0c\x23\x5f\xa3\x54\x45\x0b\xd6\x20\x58\x07\x15\x5d\x3e\xbf\x15\xae\xea\x0c\xa1\xa7\xd4\x26\xdf\xac\x81\xc2\x3a\x50\x46\xda\x4a\x99\x15\x98\x18\xea\xc1\x14\xa4\x35\x06\x25\x59\x65\x1f\xd0\xe3\xde\x06\x04\x54\x02\x96\x32\x20\x60\x23\xb4\xca\xa1\x6a\x74\x50\xb4\x82\x36\xac\x04\xfb\xc7\x76\x69\x6c\x36\x52\xf5\xeb\xd1\x41\xc6\xff\x46\x41\xd6\xa3\xd7\x07\x07\xe3\x97\x2b\x8e\x46\x6f\xde\xfc\xe5\xe4\xf3\xcf\x4f\x0f\x0e\x0e\x47\x7c\x39\xfe\xfd\x0e\xdd\x7c\xe2\x8b\x95\x08\xb8\x15\x6d\x1f\x6b\x76\xb6\xd6\xf8\x84\x1e\x96\x36\x94\x9c\x94\xeb\xc5\xdb\xfb\x7e\xe5\x7c\x71\xcd\x79\x7e\x4e\x55\x83\x29\x4f\xd8\x0d\x3a\x9e\xf1\xa2\xea\xc3\xc2\x51\xda\xb3\xe0\xcb\x14\xa1\xbf\x8e\x4f\x32\xb6\x3b\xe2\x78\x72\xcc\x87\x1c\x77\x61\x98\xd0\x09\xce\xac\x0d\x3e\x88\x7a\x2f\x01\x74\xf9\x39\x09\xc1\xc2\xff\x5b\x65\xd8\x9b\x94\xbc\x0c\xee\x0c\xf8\x20\x5c\x88\xa3\x36\x47\xd8\x2a\xad\xa1\x12\x6b\x1c\x4c\xc1\x36\x61\x65\x29\xd9\x7b\x29\xa6\x7d\x68\xf1\x92\x4d\x39\x51\x43\x8d\xe8\x3c\x87\xa0\xa1\x9b\x51\x62\x45\x6b\x72\xe5\x25\x9f\xde\x86\x12\x29\x1c\x71\xd9\x0b\x07\x06\xd3\xdd\x46\xbb\xc3\x3d\x65\xfc\xaf\xcf\xf0\xa8\x9e\xd4\xa3\xf1\xe4\xe2\xd5\x6f\xd6\x7e\xfa\xed\xa6\xfa\x78\xf1\xe5\xc8\xe7\x5f\xde\xb5\x9f\xc7\xed\xff\xd5\x97\xf9\xf9\xd5\xd9\x71\x1e\x9e\xda\x4b\x77\x3a\xde\x2e\xde\xde\xda\xf3\xcf\x97\x7e\x52\xae\x37\x14\x93\x7b\xae\x2a\xe4\x5e\x61\xdd\x56\xb8\x1c\x3c\xba\x0d\xbb\xbc\x17\x1a\x87\x12\xd5\x06\xa1\x42\xef\xc5\x0a\x3d\x6c\x4b\x02\x7d\x51\x68\x65\x30\x83\x05\xa2\xbb\xbe\x60\x14\xf1\xad\x51\x98\x33\x23\xc6\x70\x2d\x91\x18\xa7\x3b\x5b\xed\x6c\xa1\x74\x34\xc9\x87\xe7\xc0\xfa\xb8\x34\xd6\xb8\xce\xca\x60\xca\x44\x1b\x83\xa6\x8a\xc8\xc5\x52\x18\x63\x43\x17\xf3\x18\x6f\xe5\x79\x93\xee\x7e\xed\x9f\x20\x90\xa3\x7f\x34\xe8\x5a\xba\xf0\x83\x69\x0f\xc6\x5d\x3a\x73\xbb\x35\xda\x8a\x7c\x77\x3a\xa6\x10\xb2\x9a\x0d\xa6\xde\x14\x71\xbf\x59\x17\xe2\x8b\xf5\xe6\xe1\xd2\xbc\xff\x75\x5b\x7e\x39\x55\x97\xdb\x93\xb3\xe2\xbd\x3b\x94\xe2\xa2\xfd\xe5\xf4\xa3\xbc\x5c\xd5\x4f\x1f\xde\x55\x93\xa2\x9e\xff\xea\x4f\x7f\xfd\x3e\x3c\x4e\xae\xdf\x27\x12\x87\x9f\xf9\xbe\x14\x56\x6b\xbb\x25\x34\x46\x8a\xfb\x7e\xa2\xc4\x34\xd5\x92\x80\x5b\x80\x43\x5f\x5b\x93\x88\x70\x2b\x54\x60\x0e\x64\x68\x54\x62\x4d\xbe\x5c\x2f\x6e\xef\x39\xfa\xaa\x67\x60\xe5\x41\x40\x70\x22\x47\x5b\x14\x04\x70\x0c\x5b\xc4\x88\x0d\x21\x65\xe3\x84\x6c\x69\x73\xfa\xcd\x79\xeb\x33\xe6\x6b\xc4\x9c\xee\x84\xaa\x8d\xff\xa3\xb1\xae\xa9\x66\x7c\xaf\x89\x4a\x3e\xbc\xbf\x21\x2f\xe8\x8e\x91\x13\xf8\x24\x4b\x61\x56\x08\x4e\x04\x32\xfd\x8e\x2a\xb8\xb4\x86\x38\xa3\xbb\xa3\x67\x2a\x48\xab\xcc\x7c\x83\x4e\xac\x70\x8f\x4e\xba\x8f\xe9\xdb\xda\xd9\x8d\xca\xd1\xcd\xca\x10\x6a\xff\x66\x34\x0a\x4a\xae\xd1\xed\xd5\xea\xcc\xba\xd5\x48\xd4\x8a\x3c\xb9\x88\x75\x05\x84\xd6\xb0\x27\x77\x1c\x6a\x41\xb5\xa8\x68\x0c\xd3\x84\xd0\x2a\xb4\x64\x06\xeb\xb0\xa3\x4c\x46\x24\x1d\x36\xfe\x8a\x1c\xa0\xcc\x2a\x1e\xb9\xf0\xd6\xe8\x36\xd6\xa8\x79\x5d\xa3\xc9\x41\x80\xb4\x15\xab\x99\x74\xa2\xc6\xa3\x03\xb1\xa2\x91\xee\xb6\xed\x34\xdf\x4e\x4d\x66\x83\x69\x23\xd2\xa7\xb3\xf4\xff\xef\x02\x54\x4a\xcc\xdf\x82\xd3\xae\x88\x6f\x95\x2f\x29\x38\x68\x38\x2d\xf7\xf7\x37\x54\xa9\x29\x30\xe4\xda\x8e\xb7\x77\xd8\x2c\xd5\xaa\x0c\xba\x25\xc6\xe3\xc0\xe4\x48\xd2\x59\x15\xd0\xda\x86\x09\xc5\x35\xc6\x90\xfb\x8c\x48\x26\x06\xda\x52\x80\xc3\xca\x06\x84\x4a\xc8\x52\x19\x24\x75\x5e\x08\xa5\x1b\xa2\xa0\x08\x4b\x32\x4e\x7c\x43\x1c\x44\x31\x00\x61\x5a\x12\x17\xc1\xee\x93\x19\xe5\x5f\x5a\x13\x9c\xd5\x64\x32\xb2\xe3\x90\x84\x85\x6e\x72\xb2\x9b\x3b\xa1\x7a\x07\xb6\x42\xeb\xa8\xb3\xbc\xd7\x11\x1b\x0f\x3b\x6b\xe4\x32\x33\x9c\xc1\x48\xe3\x42\x7b\xdb\x0b\x1b\x86\x87\x08\x25\xdf\xde\xbe\x78\x4b\x74\x81\x9d\x58\x63\x0b\x44\xd4\x94\x20\xba\x51\xec\x0c\xcd\xaa\x82\x84\x3d\x26\xa3\x34\x42\xcb\x66\x23\xda\x6b\x14\xec\xc8\x7b\x9d\xd1\x68\x9c\x5f\x63\xfb\xf5\xf4\x1a\xdb\x8e\x4d\x76\x78\x48\x6c\x0d\x4b\xe1\x95\x24\x2d\x58\x82\x74\x98\xa3\x09\x4a\x68\xcf\x3e\x74\x89\x4b\xe9\xe8\xb2\xdb\x78\x26\xf6\x86\xb8\x3e\xa4\xae\x23\x83\x5b\x4a\x47\x28\x45\xe0\xb5\x2c\xe1\x29\x30\x7c\x52\x8a\xce\xfc\xf6\xe2\xc5\x37\xb4\x57\xed\x6c\x40\x49\xce\xf7\x29\x8d\x59\xce\xe0\x3a\xfc\xe4\x63\x08\x09\x24\xfb\x18\xd9\x99\x21\x0b\x2f\x36\xc5\x0d\x52\x37\x63\x0d\x68\x2b\x85\x2e\xad\x0f\xd1\x10\x4d\x84\x54\x03\x6b\x67\x57\x4e\x54\xa9\xf4\xc4\x3e\xa3\x4b\xf2\x7c\x71\xcd\xfd\x9a\x58\x53\xd5\xea\x0e\xd5\xc5\xa2\x16\xde\x6f\xad\x23\x19\x49\xa0\xea\x5a\x15\x9a\x2e\xf1\x09\xd0\x48\x4b\x5d\xc8\xfd\xd5\x7c\x72\x78\x04\xa5\xf0\x25\xd8\x22\xc9\x67\x21\x43\x23\x74\xbf\xc5\xee\x16\xe4\x09\x98\x29\x1a\x09\x2b\xc9\xd0\xb6\xa4\xfa\xad\x02\x78\x15\x3c\xd7\x79\xba\x21\xf1\x5a\x11\xc5\xaa\x15\x03\x27\x83\x4f\x54\x09\x38\xf8\xe4\xba\x30\xec\xaf\xc3\x3f\x1a\xf4\x61\x07\x4e\xda\xb7\xfb\xbc\x31\x3f\x93\x87\x7c\xe7\x7a\x7b\x1d\xff\xb3\xef\x9d\xa2\x90\xb6\xaa\x85\x8b\xb0\xee\x27\xbd\xd8\x24\xe5\x91\x0d\xa6\xa2\x56\xc4\x87\x46\x54\x38\x13\x5a\x49\xe4\xa1\x6e\xd7\xd9\x21\x9e\x9c\xbc\x3e\x39\x3d\xc9\xc5\xe4\xe4\xe0\xf5\xf1\xf8\x70\x9c\x1f\xe0\xe1\x51\x71\x92\xcb\xa3\xc9\xe9\xe4\xf8\xf8\xd5\xd1\xc1\xab\xfc\x20\x3f\x12\x62\xb9\xcc\xf3\xa3\x89\x18\x8f\xb1\x38\x9e\x8c\xf3\xf1\xe1\xeb\x49\x7e\xc2\x3c\x4c\xc2\x0e\x84\xe6\x26\x24\x90\x40\xa2\xab\xb4\xc3\x2f\x9d\x51\x0a\xc3\xa8\x90\xd6\xae\x15\xa3\x1b\xf3\xaf\xb0\xfa\x50\x52\x0c\x6b\xa7\x2a\xe1\xda\xb8\x5c\xa4\x4a\x16\x52\x4a\xe8\xef\x1e\x25\x8c\x80\xf4\xab\x6f\x98\x76\x52\x35\x22\x96\x92\xfc\x3c\x85\x84\x24\xf8\x84\x90\x5b\x02\xd2\x1e\x7e\x23\x10\x68\x8f\xc8\xd6\xd1\xea\x46\xe8\x06\x63\x6a\x94\x4f\xa9\xa5\x8a\xdd\x04\x2a\xab\x0c\x5b\x11\x61\xaa\x52\xc1\x71\xb6\x59\x25\x1e\xb1\x55\x45\x89\x23\x81\xd8\x51\x7d\x7c\xb2\x88\xc7\x21\xfb\x7d\xaa\x23\x95\xb5\x2f\xaf\x7f\x8f\x00\xe5\x63\x3e\x63\x0c\x67\xbf\x7f\xbe\x5d\x3f\x56\x6f\xbf\x3c\xfe\xf2\xb6\x7a\xbc\xba\x2d\x1f\xaf\x6e\xab\xdd\xd8\x63\x29\x27\xef\xab\xc7\xea\xed\xfa\x71\x35\x9b\x25\x4a\xdc\x96\x2a\x20\xf5\x6a\x9d\x42\x95\x7b\x2d\x23\xfa\x21\xd4\xb1\xd7\xaf\x7a\xf4\x10\x2d\x61\xae\xea\xd9\xe4\x24\x7b\x7d\x98\x1d\x1d\x67\xe3\xe3\xc3\xfd\xf1\x57\x93\x6c\xf2\xea\x34\x1b\x1f\x9c\x66\xe3\x43\xa6\xde\xf3\xbb\xf7\xf7\xdc\xfa\x73\xb5\xc9\x61\xd9\x76\x0f\x2c\x19\xf9\x90\x9a\x4e\x16\xc3\xe1\x19\xf5\x05\x0b\x85\xd0\x9e\xec\x1a\x2b\xad\xf3\x91\xca\xaf\x9f\xd3\x5c\xac\x1a\xbd\xda\x65\xac\x25\x89\x2e\x48\x54\xa5\x5a\x4f\x42\xa5\xeb\x88\x86\xa9\xe9\x50\xc4\xe2\xa9\xf7\xa5\xac\xa8\x90\xa4\x6f\xa7\x57\x98\x70\x92\x11\xbe\xa6\x68\xf2\xda\x2a\x13\x48\xea\x2b\x59\x76\x2b\xb8\x13\xce\x55\xd1\x0e\xa6\x9d\x88\xfe\x89\x6e\x6f\x6a\xc3\x7d\x10\x21\x6a\x18\xde\x9e\x14\x4b\x72\xbb\xc0\x40\x85\x71\x15\xa5\x08\x81\x39\x89\xff\xf4\x26\xc1\x4d\x40\x36\x98\xc6\x43\x24\xf7\x63\x18\xbe\xb1\x3c\x98\xc2\x27\xae\x9a\x7f\x8f\x32\xb9\x8c\x4a\xe4\x79\xfe\x63\x19\x8f\x77\x9c\x12\xa6\xcc\x9e\x7a\xe4\x36\x54\x98\xb6\x4b\x56\xde\x2d\xe7\xf6\x28\xb2\x21\x55\x2a\xa2\xbe\xae\x71\xe1\x74\xd5\x24\x39\x65\xe3\x1c\x1a\xa9\xd0\x53\x05\x42\x21\x4b\x7e\xb2\x60\x59\x99\x70\x1a\xb7\x9b\x9d\x9d\x5f\x0d\xa6\x2f\x86\x1e\xce\x5f\x0e\xdd\x7c\x3d\xf4\x78\xf9\xd5\xd0\xe5\xc3\xd5\x77\xc9\xdc\x05\x2e\x9b\xd5\x77\xc9\x0b\xef\x0c\xda\xae\x56\x94\x10\x8d\x1b\xd4\x54\x74\x3f\xf2\x9b\x03\xff\x8c\xfd\xe4\x3f\x72\x5a\x48\x82\xac\xb0\x43\x62\x31\x25\x71\x08\x5b\xe1\x48\x93\x0d\x01\x9d\xb3\x6e\x08\xd2\x29\x66\xe5\x7f\x0e\xa6\xb4\x27\x7f\x3f\xa3\x4f\xfe\xc3\xcb\xae\xb6\xab\x5e\x70\x69\xbb\xfa\xea\x4d\x70\xa4\xed\xaa\x7f\x88\xe1\xb7\xb0\xae\x3b\x4f\x6f\x50\x84\x9e\xab\x87\x87\x45\xdf\x62\xa7\x52\xeb\x33\x88\xdf\xa4\xe1\xa4\x5a\x93\x16\x5d\xe2\x0e\x58\xdc\x63\xef\x5e\xc9\x12\x4d\xf7\x3d\xfd\x8b\x7d\x94\x89\x2d\x13\x2d\xa5\x2a\xb7\x64\x15\xd6\x3d\x91\x8a\xc0\x4c\xf4\x66\x34\xea\x65\xcf\x9b\xff\x49\x9f\x92\xf7\xff\x3b\xe2\x48\x8e\x6a\x1a\x03\x6b\x64\x2f\xad\x33\x2e\x85\xbc\x70\x76\x74\x70\xc4\x1c\xf0\xc9\xa9\x80\x70\xbe\xf8\xd0\x5b\x4f\x75\x7f\xf7\xe0\xc0\x9a\x63\x30\x05\x59\x37\xdd\xd7\xa3\x50\xd5\x7b\xcf\xca\x19\x8d\xff\x2b\x00\x00\xff\xff\xff\x9b\x63\xf0\x0d\x18\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 6157, mode: os.FileMode(436), modTime: time.Unix(1575648391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
