// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x72\x1b\x37\xb2\xbe\xe7\x53\xf4\x45\x52\x39\xa7\x4a\x1e\x8a\xb4\xf5\x63\xf3\xf0\x54\xd1\x96\xbc\x56\x59\x91\x58\xa2\x1c\x25\xba\x6b\xce\xf4\x70\xb0\xc2\x00\x63\x00\x43\x8a\xd9\xda\x3c\xfb\x56\x37\x30\x43\x4a\x8e\xf7\x62\xcb\xae\x6c\x7c\x11\x09\x03\xa0\x1b\xfd\xf3\xf5\xd7\xad\x09\xbc\xf8\xa6\xff\x0d\x26\x70\x86\x01\xc1\x53\x08\xca\xac\xfc\xe0\x9b\x0b\x18\x4c\xe0\xb6\x22\x28\x94\xa3\x3c\x58\xb7\x85\x60\xc1\x07\xeb\x08\x0a\x11\xdc\xe6\x15\xa0\x87\x50\x11\xd8\x86\xcc\x12\x7f\x47\x74\xf2\x6d\x89\x9e\x0e\x40\x35\xa5\x87\x9a\x02\xf2\xd2\x01\xa0\x29\x06\x13\x68\xda\xa5\x56\xb9\xec\xca\x3a\x01\x54\x62\xab\x03\x28\x0f\x7f\x0c\xb3\xbd\xab\xac\x81\xf9\xf5\xe2\xe2\x57\xb8\x5e\x90\x3f\x80\x1f\x2e\xaf\xdf\xcd\x2e\x67\xf3\xf9\xd9\xec\x76\x36\xbc\x6e\xc8\xbc\xed\xf7\xdd\x29\x53\xd8\x8d\x3f\x18\x4c\xe0\x8f\xe1\xa5\x5a\x3a\x74\xdb\xe1\xac\x69\xb4\xca\x31\x28\x6b\x60\xd1\x36\x8d\x75\xe1\xd9\xb1\x9f\x31\x87\xeb\x85\xe8\x06\x3f\x54\xb6\xa6\xe1\x13\xf1\x83\x09\xcc\x35\x9a\xd7\x19\xc0\xb9\x59\x2b\x67\x4d\x4d\x26\xc0\x1a\x9d\xc2\xa5\x26\x0f\xe8\x08\xe8\xb1\x41\x53\x50\x01\xde\xb2\x2d\xb6\x50\xe3\x16\x96\x04\xad\xa7\x22\x03\xb8\xba\xbe\x3d\x7f\xd3\xe9\x37\x98\x00\x7d\xf5\xa2\xb0\x6d\x54\x8e\x5a\x6f\xe1\xc7\x5f\x66\x37\x17\xb3\xb7\x97\xe7\x3f\x1e\xc0\xb2\x0d\xe9\xda\xd6\x07\xbe\x17\xf3\x9c\xbc\xa7\x02\x36\x2a\x54\x83\x09\xfc\xd0\x6d\x86\x8a\x1c\x65\x00\x33\xed\xed\x01\xfc\xc1\xf6\xec\x75\x0b\xf6\xa9\xf9\xf6\x6c\xc6\x6e\x60\x77\x14\xca\x4d\x9f\xd8\x7f\x30\xf8\xf6\x31\x35\x81\x2b\x0a\x1b\xeb\x1e\xbe\x6f\xdc\x7e\xf2\x04\x81\x7c\x30\x14\xf8\x79\xe9\xc7\xe9\x48\xbe\x19\xb5\x26\xe7\x51\xc3\x5c\xb7\x2b\x71\xfd\x5c\xe3\x16\xfe\xe7\xd3\xdc\xcc\xff\x17\xb0\x0d\xb6\xc6\x90\x3c\xc1\xd6\x88\x21\xae\x95\x0f\x64\x80\x83\x08\xec\x32\xa0\x32\xac\x3a\x7f\xa1\xc7\x40\xce\xa0\x86\x8b\x39\x60\x51\x38\xf2\x1e\x4a\x67\x6b\xf0\x31\xe6\xa8\x80\x82\xd6\x2a\x27\x9f\xc1\x6d\xa5\x3c\xd8\x46\x42\xb2\x50\x3e\x3a\x5f\x89\x92\xc6\xb6\x8d\x69\xa2\x8e\xbf\xd9\x56\xc2\xc8\x37\x94\xab\x72\x0b\xd6\x10\x58\x07\x35\x27\x9f\xdf\xa0\xab\x3b\x41\xe4\xd9\xb5\x49\x37\x6b\xa0\xb4\x0e\x94\xc9\x6d\xad\xcc\x0a\x4c\x34\xf5\x60\x02\xb9\x35\x86\x72\x96\x2a\x3a\x90\xa7\xbd\x0b\x38\x50\x39\xb0\x94\x01\x84\x35\x6a\x55\x40\xdd\xea\xa0\x78\x07\x5f\x58\xa3\xe8\x27\x72\x79\x6d\x3a\x54\xcd\xab\xe1\x61\x26\xff\x86\x21\x6f\x86\xaf\x0e\x0f\x47\xcf\x77\x1c\x0f\xdf\xbc\xf9\xea\xc7\xa7\xc7\x5f\x1f\x1e\x1e\x0d\x25\x39\xfe\xfc\x86\xee\x7b\xc2\x8b\x15\x06\xda\xe0\xb6\xb7\xb5\x28\xdb\x68\x7a\x24\x0f\x4b\x1b\x2a\x71\xca\xc5\xfc\xfd\xa2\xdf\x39\x9b\x5f\x88\x9f\x9f\x42\xd5\x60\x22\x1f\xec\x9a\x9c\x7c\xf1\x58\xf7\x66\x11\x2b\xed\x49\xf0\x55\xb2\xd0\xd7\xed\x93\x84\xed\x9e\x38\x1a\x9f\xc8\x23\x47\x9d\x19\xc6\xfc\x82\xb7\xd6\x06\x1f\xb0\xd9\x73\x00\x27\xbf\x38\x21\x58\xf8\xbb\x55\x46\xb4\x49\xce\xcb\xe0\xda\x80\x0f\xe8\x42\x5c\xb5\x05\xc1\x46\x69\x0d\x35\x3e\xd0\x60\x02\xb6\x0d\x2b\xcb\xce\xde\x73\x31\xdf\xc3\x9b\x97\x22\xca\x61\x03\x0d\x91\xf3\x62\x82\x96\x33\xa3\xa2\x9a\xf7\x14\xca\xe7\xf2\x7a\x1b\x2a\x62\x73\xc4\x6d\xcf\x14\x18\x4c\x76\x17\xed\x1e\xf7\x98\xc9\xbf\xde\xc3\xc3\x66\xdc\x0c\x47\xe3\xb3\x97\x1f\xad\xbd\x7b\x7b\xbe\xc8\xc7\x61\x61\xd6\xbf\xdc\x50\xfd\xd1\xfb\xb3\x9f\xd5\xc7\xcb\x7b\xfa\x58\x7e\xba\xa9\x36\xbf\xe2\xe6\xfe\x0e\x95\xfd\xec\xe7\x2f\xd7\xa3\x0d\xdb\x64\x21\x55\x85\xd5\x2b\xad\xdb\xa0\x2b\xc0\x93\x5b\x8b\xca\x7b\xa6\x71\x94\x93\x5a\x13\xd4\xe4\x3d\xae\xc8\xc3\xa6\xe2\xa0\x2f\x4b\xad\x0c\x65\x30\x27\x72\x17\x67\x12\x45\x92\x35\x8a\x0a\x41\xc4\x68\xae\x25\x31\xe2\x74\x6f\x6b\x9c\x2d\x95\x8e\x22\xe5\xf1\x62\x58\x1f\xb7\xc6\x1a\xd7\x49\x19\x4c\x04\x68\xa3\xd1\x54\x19\xb1\x38\x47\x63\x6c\xe8\x6c\x1e\xed\xad\xbc\x5c\xd2\xe5\xd7\xfe\x0b\x02\x2b\xfa\xb9\x25\xb7\xe5\x84\x1f\x4c\xfa\x60\xdc\xb9\xb3\xb0\x1b\xa3\x2d\x16\xbb\xd7\x09\x84\xb0\xd4\x6c\x30\xf1\xa6\x8c\xf7\x4d\xff\x53\x13\x7f\x63\x8c\x9d\xc0\x15\xab\xbe\x48\x20\x0e\x2f\x24\x5f\x4a\xab\xb5\xdd\x70\x34\x46\x88\xfb\x7e\xa4\xc4\xb4\xf5\x92\x03\xb7\x04\x47\xbe\xb1\x26\x01\xe1\x06\x55\x10\x0c\x94\xd0\xa8\xf1\x81\x75\xb9\x98\x5f\x2d\xc4\xfa\xaa\x47\x60\xe5\x01\x21\x38\x2c\xc8\x96\x25\x07\x38\x85\x0d\x51\x8c\x0d\xcc\xf3\xd6\x61\xbe\xe5\xcb\xf9\x77\xf1\x5b\xef\x31\xdf\x10\x15\x9c\x13\xaa\x31\xfe\x73\x6b\x5d\x5b\x4f\x25\xaf\x19\x4a\x3e\xdd\x5c\xb2\x16\x9c\x63\xac\x04\x3d\xe6\x15\x9a\x15\x81\xc3\xc0\xa2\x7f\xe6\x0a\x9e\x5b\xc3\x98\xd1\xe5\xe8\x5b\x15\x72\xab\xcc\x6c\x4d\x0e\x57\xb4\x07\x27\xdd\x61\x3e\xdb\x38\xbb\x56\x05\xb9\x69\x15\x42\xe3\xdf\x0c\x87\x41\xe5\x0f\xe4\xf6\x6a\x75\x66\xdd\x6a\x88\x8d\x62\x4d\xce\x62\x5d\x01\xd4\x1a\xf6\xe8\x8e\x23\x8d\x5c\x8b\xca\xd6\x08\x4c\xa0\x56\x61\xcb\x62\xa8\x09\x3b\xc8\x94\x88\xe4\xc7\xc6\xdf\x22\x06\x28\xb3\x8a\x4f\x2e\xbd\x35\x7a\x1b\x6b\xd4\xac\x69\xc8\x14\x80\x90\xdb\x5a\xd8\x4c\x7a\x51\xeb\xc9\x01\xae\x78\xa5\xcb\xb6\x1d\xe7\xdb\xb1\xc9\x6c\x30\x69\x31\x1d\x9d\xa6\xff\x7f\x97\x40\x65\xc7\xfc\x25\x71\xda\x15\xf1\x8d\xf2\x15\x1b\x87\x8c\xb8\x65\xb1\xb8\xe4\x4a\xcd\x86\x61\xd5\x76\xb8\xbd\x8b\xcd\x4a\xad\xaa\xa0\xb7\x8c\x78\x62\x98\x82\x98\x3a\xab\x12\xb6\xb6\x15\x40\x71\xad\x31\xac\xbe\x44\xa4\x00\x03\x5f\x89\xe0\xa8\xb6\x81\xa0\xc6\xbc\x52\x86\x98\x9d\x97\xa8\x74\xcb\x10\x14\xc3\x92\x85\x33\xde\x30\x06\xb1\x0d\x00\xcd\x96\xc9\x45\xb0\xfb\x60\xc6\xfe\xcf\xad\x09\xce\x6a\x16\x19\xd1\xf1\x80\x89\x85\x6e\x0b\x96\x5b\x38\x54\xbd\x02\x1b\xd4\x3a\xf2\x2c\xef\x75\x8c\x8d\xdb\x9d\x34\x56\x59\x10\xce\x50\x84\x71\xd4\xde\xf6\xc4\x46\xc2\x03\x43\x25\xd9\xdb\x17\xef\x9c\x5c\x10\x25\x1e\x68\x0b\x0c\xd4\xec\x20\xce\x28\x51\x86\xbf\xaa\x92\x89\x3d\x25\xa1\xbc\xc2\xdb\xa6\x43\xbe\x6b\x18\xec\xd0\x7b\x9d\xf1\x6a\xfc\xfe\x40\xdb\x2f\x3f\x3f\xd0\xb6\x43\x93\x5d\x3c\x24\xb4\x86\x25\x7a\x95\x33\x17\xac\x20\x77\x54\x90\x09\x0a\xb5\x17\x1d\x3a\xc7\x25\x77\x74\xde\x6d\xbd\x00\x7b\xcb\x58\x1f\x52\xd7\x91\xc1\x15\xbb\x23\x54\x18\x64\xaf\x50\x78\x36\x8c\xbc\x94\xad\x33\xbb\x3a\x7b\x76\x86\xef\x6a\x9c\x0d\x94\xb3\xf2\xbd\x4b\xa3\x97\x33\xb8\x08\x3f\xf9\x68\x42\x0e\x92\xfd\x18\xd9\x89\x61\x09\xcf\x2e\xa5\x35\x71\x37\x63\x0d\x68\x9b\xa3\xae\xac\x0f\x51\x10\x7f\x08\xa9\x06\x36\xce\xae\x1c\xd6\xa9\xf4\xc4\x3e\xa3\x73\xf2\x6c\x7e\x21\xfd\x1a\x3e\x70\xd5\xea\x1e\xd5\xd9\xa2\x41\xef\x37\xd6\x31\x8d\xe4\xa0\xea\x5a\x15\xfe\x5c\xd1\x23\x90\xc9\x2d\x77\x21\x8b\x0f\xb3\xf1\xd1\x31\x54\xe8\x2b\xb0\x65\xa2\xcf\x98\x87\x16\x75\x7f\xc5\x2e\x0b\x8a\x14\x98\xc9\x1a\x29\x56\x92\xa0\x4d\xc5\xf5\x5b\x05\xf0\x2a\x78\xa9\xf3\x9c\x21\x31\xad\x18\x62\xd5\x4a\x02\x27\x83\x3b\xae\x04\x62\x7c\x56\x1d\x8d\xe8\xeb\xe8\x73\x4b\x3e\xec\x82\x93\xef\xed\x8e\xb7\xe6\x05\x6b\x28\x39\xd7\xcb\xeb\xf0\x5f\x74\xef\x18\x45\x6e\xeb\x06\x5d\x0c\xeb\xfe\xa3\xc7\x75\x62\x1e\xd9\x60\x82\x8d\x62\x3c\x34\x58\xd3\x14\xb5\xca\x49\x96\xba\x5b\xa7\x47\x74\x7a\xfa\xea\xf4\xf5\x69\x81\xe3\xd3\xc3\x57\x27\xa3\xa3\x51\x71\x48\x47\xc7\xe5\x69\x91\x1f\x8f\x5f\x8f\x4f\x4e\x5e\x1e\x1f\xbe\x2c\x0e\x8b\x63\xc4\xe5\xb2\x28\x8e\xc7\x38\x1a\x51\x79\x32\x1e\x15\xa3\xa3\x57\xe3\xe2\x54\x70\x98\x89\x1d\xa0\x96\x26\x24\x30\x41\xe2\x54\xda\xc5\x2f\xbf\x31\x47\x23\x51\x91\x5b\xfb\xa0\x24\xba\xa9\xf8\x22\x56\x6f\x2b\xb6\x61\xe3\x54\x8d\x6e\x1b\xb7\x63\xaa\x64\x21\xb9\x84\x7f\xee\xa3\x44\x22\x20\xfd\xd6\x37\x4c\x3b\xaa\x1a\x23\x96\x9d\xfc\xd4\x85\x1c\x49\x70\x47\x50\x58\x0e\xa4\xbd\xf8\x8d\x81\xc0\x77\x44\xb4\x8e\x52\xd7\xa8\x5b\x8a\xae\x51\x3e\xb9\x96\x2b\x76\x1b\xb8\xac\x4a\xd8\x62\x0c\x53\x95\x0a\x8e\xb3\xed\x2a\xe1\x88\xad\x6b\x76\x1c\x13\xc4\x0e\xea\xe3\xc8\x22\x3e\x87\xe5\xf7\xae\x8e\x50\xb6\x7d\x9e\xfe\x7d\x04\x28\x1f\xfd\x19\x6d\x38\xfd\xed\xd7\xab\x87\xfb\xfa\xfd\xef\xf7\x7f\x7b\x5f\xdf\x7f\xb8\xaa\xee\x3f\x5c\xd5\xbb\xb5\xfb\x2a\x1f\xdf\xd4\xf7\xf5\xfb\x87\xfb\xd5\x74\x9a\x20\x71\x53\xa9\x40\xdc\xab\x75\x0c\x35\xdf\x6b\x19\xc9\x1f\x40\x13\x7b\xfd\xba\x8f\x1e\x86\x25\x2a\x54\x33\x1d\x9f\x66\xaf\x8e\xb2\xe3\x93\x6c\x74\x72\xb4\xbf\xfe\x72\x9c\x8d\x5f\xbe\xce\x46\x87\xaf\xb3\xd1\x91\x40\xef\xbb\xeb\x9b\x85\xb4\xfe\x52\x6d\x0a\x58\x6e\xbb\x01\x4b\xc6\x3a\xa4\xa6\x53\xc8\x70\x78\x02\x7d\xc1\x42\x89\xda\xb3\x5c\x63\x73\xeb\x7c\x84\xf2\x8b\xa7\x30\x17\xab\x46\xcf\x76\x25\xd6\x12\x45\x47\x26\x55\xa9\xd6\x33\x51\xe9\x3a\xa2\x83\xd4\x74\x28\x46\xf1\xd4\xfb\xb2\x57\x54\x48\xd4\xb7\xe3\x2b\x02\x38\x49\x88\xa4\x29\x99\xa2\xb1\xca\x04\xa6\xfa\x2a\xaf\xba\x1d\xd2\x09\x17\xaa\xdc\x0e\x26\x1d\x89\xfe\x89\xb3\x37\xb5\xe1\x3e\x60\x88\x1c\x46\xae\x67\xc6\x92\xd4\x2e\x29\x70\x61\x5c\x45\x2a\xc2\xc1\x9c\xc8\x7f\x9a\x49\x48\x13\x90\x0d\x26\xf1\x11\x49\xfd\x68\x86\x6f\x4c\x0f\x26\x70\x27\x55\xf3\xaf\x61\x26\xe7\x91\x89\x3c\xf5\x7f\x2c\xe3\x31\xc7\xd9\x61\xca\xec\xb1\x47\x69\x43\xd1\x6c\x3b\x67\x15\xdd\x76\x69\x8f\x22\x1a\x72\xa5\x62\xe8\xeb\x1a\x17\x71\x57\xc3\x94\x33\x6f\x9d\x23\x93\x2b\xf2\x5c\x81\x08\xf3\x4a\x46\x16\x42\x2b\x53\x9c\xc6\xeb\xa6\x6f\xdf\x7d\x78\xbe\x72\xfb\x6e\x30\x79\xba\x74\xf9\xe5\xd2\xfd\xf9\x17\x4b\xe7\xb7\x1f\xbe\x8b\xe3\x62\xb3\x3a\x33\x05\xbc\x4f\xcd\xea\x22\x32\xb0\xbf\xce\x95\x3d\x15\x64\xd5\x5e\xa0\x29\x5e\x3c\xed\xa3\xa3\x8b\xfe\x24\x75\x6d\x59\x92\x4b\x0d\x6f\x9c\xcf\xee\x1f\x54\x39\xf5\xb3\x84\xdd\x38\xe2\x79\xbb\xbc\x24\x88\xd1\x64\xa1\x69\x7d\xb5\x6b\x60\x39\x21\x13\x75\x95\x54\x8b\x8d\xfa\xde\x2c\x22\x54\xd6\xd3\x57\xae\x72\x14\x9c\xa2\x75\x0c\xd2\xa7\x1d\x3f\x77\xe0\x32\xd3\xaa\x19\xa8\xf3\x07\xce\x70\x99\x00\x24\xb2\xd5\xf5\x77\x8d\xdd\x90\x8b\xed\x48\xaa\x28\x19\xdc\xf4\xc4\x59\xf9\xce\x38\xbe\xb2\xad\x96\x0a\xd0\x0f\x60\x97\x14\xd9\x87\x90\xea\xa5\x7d\x8c\x23\x00\x04\x6d\x03\xb7\x85\xf1\x66\x7e\x02\x9b\x8e\xfb\x36\xf4\x89\x63\xc8\x59\x5e\x55\x66\x25\xfc\x6d\x65\x6d\x01\x05\xa1\xe6\x83\x69\xec\x1d\x03\x75\xaf\xa9\xef\x87\x20\x7f\xe2\xbc\x38\x42\xe8\x4d\x4c\xe2\xce\x50\xc5\x34\x8a\xf8\xd5\xd1\xd2\xa6\x75\x0d\x9b\x54\xda\xe2\x34\xfb\x16\x35\x44\xee\x73\x28\xdf\x5d\xc5\x89\x1d\x6f\xea\x44\x76\xa4\x81\x18\x54\xf9\x6e\xe5\xe2\xfe\x8b\x33\xdf\x55\x27\x6f\x4a\x5e\xfa\xef\x19\x49\x9c\xd1\xb2\x5d\x7d\x97\x2c\x93\x9b\x41\xdb\xd5\x8a\x83\x47\xd3\x9a\x34\xb3\xe1\x5f\x64\x18\x28\xbf\x46\x2f\xfd\xa3\xe0\x8d\xdc\x29\x95\xf6\x80\xe9\x85\xca\xe9\x00\x36\xe8\x38\xe8\x0e\x80\x9c\xb3\xee\x00\x72\xa7\x84\x2e\xfd\x73\x30\xe1\x3b\xe5\xfc\x94\x8f\xfc\x9b\x3f\xb9\x68\xbb\xea\x3b\x21\x6d\x57\x5f\x0c\xeb\x87\xda\xae\xfa\x09\xa9\x0c\xa9\xbb\xb1\x59\x1a\x0e\x73\x8c\x7c\xb8\xbd\x9d\xf7\xb3\xaf\xc4\x81\x7d\x06\xf1\x4c\x5a\xde\x43\x0c\x19\x8c\xec\x10\x5f\x86\x5f\xbb\xf1\x75\xe2\x4f\xfd\xb0\xed\xd9\x3d\xca\xc4\x59\x06\x6f\xe5\x48\x5a\x4a\x7b\xd4\xfd\xed\x02\x83\x50\x84\x37\xc3\x61\xdf\x8f\xbc\xf9\xbf\x74\x94\xb5\xff\xff\xa1\x58\x72\xd8\xf0\x1a\x58\x93\xf7\x3d\x6f\x26\x1c\x55\x36\x4e\x8f\x0f\x8f\x25\x75\xee\x9c\x0a\x04\xef\xe6\x9f\x7a\xe9\x09\xb5\x76\x93\x40\x69\x06\x18\x35\x9a\xb6\x3b\x3d\x0c\x75\xb3\xf7\xf7\x9e\x8c\xd7\xff\x15\x00\x00\xff\xff\x36\x6e\xe6\x29\xa6\x1b\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 7078, mode: os.FileMode(420), modTime: time.Unix(1576027858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

