// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x73\xdb\xb8\x11\x7f\xd7\x5f\xb1\x0f\x77\x73\xed\x8c\x8e\xb4\x64\x5b\xfe\x50\xd5\x19\xf9\x23\x8d\x2f\x8e\xad\x46\x76\x9c\xf3\x1b\x44\x2c\x45\x9c\x40\x80\x01\x40\xc9\x4c\xa7\xf9\xdb\x3b\x0b\x80\x94\xec\x34\x7d\xe8\xc4\x73\xf6\x8b\x88\x8f\xdd\xc5\xee\x6f\x77\x7f\xc0\x18\x7e\xfd\xa1\x7f\xbd\x31\x5c\x30\xc7\xc0\xa2\x73\x42\x2d\x6d\xef\x87\x2b\xe8\x8d\xe1\xae\x40\xe0\xc2\x60\xe6\xb4\x69\xc0\x69\xb0\x4e\x1b\x04\xee\x15\xd7\x59\x01\xcc\x82\x2b\x10\x74\x85\x6a\xc1\xbe\x30\x66\xfc\xdc\x82\x59\xec\x83\xa8\x72\x0b\x25\x3a\x46\x43\x7d\x60\x8a\xf7\xc6\x50\xd5\x0b\x29\x32\xbf\x2a\x69\x15\x60\xce\x6a\xe9\x40\x58\xf8\x9a\x26\x3b\xa2\xb4\x82\xd9\xed\xfc\xea\x13\xdc\xce\xd1\xf6\xe1\xa7\xeb\xdb\xf3\xe9\xf5\x74\x36\xbb\x98\xde\x4d\xd3\xdb\x0a\xd5\x59\xb7\xee\x41\x28\xae\x37\xb6\xdf\x1b\xc3\xd7\xf4\x5a\x2c\x0c\x33\x4d\x3a\xad\x2a\x29\x32\xe6\x84\x56\x30\xaf\xab\x4a\x1b\xf7\x62\xdb\x7b\x96\xc1\xed\xdc\xdb\x06\x3f\x15\xba\xc4\xf4\x99\xfa\xde\x18\x66\x92\xa9\x93\x04\xe0\x52\xad\x85\xd1\xaa\x44\xe5\x60\xcd\x8c\x60\x0b\x89\x16\x98\x41\xc0\xa7\x8a\x29\x8e\x1c\xac\x26\x5f\x34\x50\xb2\x06\x16\x08\xb5\x45\x9e\x00\xdc\xdc\xde\x5d\x9e\xb6\xf6\xf5\xc6\x80\xdf\x15\xe4\x9a\x4a\x64\x4c\xca\x06\x7e\xfe\x38\xfd\x70\x35\x3d\xbb\xbe\xfc\xb9\x0f\x8b\xda\x45\xb1\xb5\x75\x24\x97\x65\x19\x5a\x8b\x1c\x36\xc2\x15\xbd\x31\xfc\xd4\x2e\x86\x02\x0d\x26\x00\x53\x69\x75\x1f\xbe\x92\x3f\x3b\xdb\x9c\x7e\xee\xbe\x1d\x9f\x51\x18\x28\x1c\x5c\x98\xc9\x33\xff\xf7\x7a\x3f\x1e\x53\x63\xb8\x41\xb7\xd1\x66\xf5\xba\xb8\xbd\xb7\x08\x0e\xad\x53\xe8\xe8\x78\xf1\xe7\x64\xe0\xe7\x94\x58\xa3\xb1\x4c\xc2\x4c\xd6\x4b\x1f\xfa\x99\x64\x0d\xfc\xe5\x7e\xa6\x66\x7f\x05\x56\x3b\x5d\x32\x17\x23\x41\xde\x08\x10\x97\xc2\x3a\x54\x40\x20\x02\xbd\x70\x4c\x28\x32\x9d\x66\xf0\xc9\xa1\x51\x4c\xc2\xd5\x0c\x18\xe7\x06\xad\x85\xdc\xe8\x12\x6c\xc0\x1c\x72\xe0\xb8\x16\x19\xda\x04\xee\x0a\x61\x41\x57\x1e\x92\x5c\xd8\x10\x7c\xe1\x8d\x54\xba\xae\x54\x15\x6c\xfc\x5d\xd7\x1e\x46\xb6\xc2\x4c\xe4\x0d\x68\x85\xa0\x0d\x94\x94\x7c\x76\xc3\x4c\xd9\x2a\x42\x4b\xa1\x8d\xb6\x69\x05\xb9\x36\x20\x54\xa6\x4b\xa1\x96\xa0\x82\xab\x7b\x63\xc8\xb4\x52\x98\x91\x56\x6f\x03\x5a\xdc\x11\x40\x40\x25\x60\x09\x05\x0c\xd6\x4c\x0a\x0e\x65\x2d\x9d\xa0\x15\x24\xb0\x64\xde\x3e\xaf\x97\xc6\x26\xa9\xa8\x0e\xd2\xbd\xc4\xff\xa7\x2e\xab\xd2\x83\xbd\xbd\xc1\xcb\x15\xa3\xf4\xf4\xf4\xbb\x93\xcf\xb7\x9f\xec\xed\x1d\xa6\x3e\x39\xfe\xbb\x84\x76\x3e\xd6\x8b\x25\x73\xb8\x61\x4d\xe7\x6b\x6f\x6c\x25\xf1\x09\x2d\x2c\xb4\x2b\x7c\x50\xae\x66\x6f\xe6\xdd\xca\xe9\xec\xca\xc7\xf9\x79\xa9\xea\x8d\xfd\x84\x5e\xa3\xf1\x33\x96\x95\x9d\x5b\xbc\x97\x76\x34\xd8\x22\x7a\xe8\xfb\xfe\x89\xca\xb6\x47\x1c\x0c\x8f\xfc\x21\x07\xad\x1b\x86\x74\x82\x33\xad\x9d\x75\xac\xda\x09\x00\x25\xbf\x0f\x82\xd3\xf0\x87\x16\xca\x5b\x13\x83\x97\xc0\xad\x02\xeb\x98\x71\x61\x54\x73\x84\x8d\x90\x12\x4a\xb6\xc2\xde\x18\x74\xed\x96\x9a\x82\xbd\x13\x62\x92\x43\x8b\x17\x5e\x95\x61\x15\x54\x88\xc6\x7a\x17\xd4\x94\x19\x05\x96\xb4\x86\x0b\x9b\xf9\xd3\x6b\x57\x20\xb9\x23\x2c\x7b\x61\x40\x6f\xbc\x15\xb4\x3d\xdc\x53\xe2\xff\xbb\x08\xa7\xd5\xb0\x4a\x07\xc3\x8b\xfd\x77\x5a\x3f\xbc\xbb\x2e\x3f\x5e\x7c\x19\x59\xfe\xe5\x7d\xf3\x69\xd0\xfc\xb3\xba\xe4\xe7\x6f\xcf\x8e\xb8\x7b\x6a\x2e\xcd\xc9\x60\x33\x7b\x73\xa3\xcf\x3f\x5d\xda\x61\xb1\x5a\xff\x1f\xe2\xaf\x17\x77\x67\xeb\x93\xa3\xeb\xd1\x1f\x6b\x76\xbd\xe2\xf3\x0f\xd5\xe7\xe2\xfc\xd3\xfe\xe6\x68\xd6\xcc\x2e\x1e\xee\x8f\x56\x9b\xdf\xec\xbb\xdf\x9a\x2f\x6e\x7a\x7f\xf3\x3a\x35\x8c\xa2\x30\x8f\x05\x0c\x7e\xf5\x58\xc9\xb5\x94\x7a\x43\x91\x08\xe9\xfd\x7a\x0d\x59\xd5\xe5\x82\x82\x96\x83\x41\x5b\x69\x15\x8b\xc0\x86\x09\xe7\xf3\x7f\x53\xa0\x22\x78\x90\x2d\x57\xb3\x9b\x39\x7c\xae\xd1\x88\xae\xfa\x08\x0b\x0c\x9c\x61\x1c\x75\x9e\x93\xf7\xd1\x6d\x10\x43\xcc\x59\x96\xd5\x86\x65\x0d\x09\xa7\x6f\xda\xd9\x74\xa9\x63\x2b\x44\x4e\x78\x10\x95\xb2\x9f\x6b\x6d\xea\x72\xe2\x31\x4d\x69\x74\xff\xe1\x9a\xac\x20\x7c\x91\x11\xf8\x94\x15\x4c\x2d\x11\x0c\x73\xa4\xfa\x3d\x75\xaf\x4c\x2b\xca\x97\x16\x9f\x67\xc2\x65\x5a\xa8\xe9\x1a\x0d\x5b\xe2\x4e\x2a\xb5\x9b\x69\x6f\x65\xf4\x5a\x70\x34\x93\xc2\xb9\xca\x9e\xa6\xa9\x13\xd9\x0a\xcd\x4e\x9f\x4a\xb4\x59\xa6\xac\x12\x3d\xd8\xf9\x23\x7a\x14\xea\x2b\x30\x29\x61\xa7\xed\x1b\x94\x8c\x6a\x72\x5e\x2b\x9f\x2e\x4c\x0a\xd7\x90\x4a\xac\xdc\xb6\x74\xf8\x44\xa3\x83\x87\xaf\x90\x0b\x42\x2d\xc3\xf1\x73\xab\x95\x6c\x42\xad\xfe\xc1\x41\x0e\xde\xfc\x53\xc0\xd5\x76\x9d\x8d\xb0\x05\xc5\x08\x95\xf7\xdf\x7c\x7e\x4d\xad\x85\x5c\x43\xa6\x6d\x0b\xcd\x16\x50\x85\x58\x16\x4e\x36\x60\x30\xd3\x65\x89\x44\x39\xc8\x4f\x39\x34\xba\xf6\xe5\xcd\xd4\x4a\x91\xf9\x1e\x46\x68\x7c\xd1\xa1\x76\x63\xb0\xd4\x0e\xa1\x64\x59\x21\x14\x12\x9d\xcc\x99\x90\x35\xb1\xa1\x80\x25\x52\x4e\xf5\xae\x37\xa6\x38\xea\x0d\x30\xd5\x50\x37\x74\xba\x35\x84\x7e\x52\xa0\x32\xad\x9c\xd1\x92\x54\x1a\x1f\xbe\x3e\x75\x42\x59\x73\xd2\xcb\x0d\x13\x9d\x01\x1b\x26\x65\x20\x06\xd6\xca\x10\xc4\xbb\xad\x36\x32\xd9\x57\x58\x85\xa1\x24\x33\x69\x75\xd7\x89\x69\x7f\xc5\x5c\xe1\x53\xae\xeb\x36\x19\x1a\xe7\x8d\x58\x61\x03\xb9\x90\x48\x01\xa2\x34\xf0\xc6\xd0\xac\xc8\x89\x89\x62\x54\x4a\x23\xb4\x6c\x92\x92\xac\xd4\xe9\xd4\x5a\x99\xd0\x68\x98\x5f\x61\xf3\xed\xf4\x0a\x9b\xb6\x04\x6c\xf1\xe0\x89\x23\xd5\x7a\x66\x45\x46\xe4\xa5\x80\xcc\x20\x47\xe5\x04\x93\xd6\xdb\xd0\x06\x2e\x86\xa3\x8d\x6e\x6d\xa9\x7f\xd0\x0e\x5a\x1c\x68\x72\x02\x37\x14\x0e\x57\x30\xe7\xd7\x7a\xce\x49\x8e\xf1\x27\x25\xef\x4c\x6f\x2e\x5e\xec\x21\x59\x95\xd1\x0e\x33\x32\xbe\x0b\x69\x88\x72\x02\x57\xee\x17\x1b\x5c\x48\x20\xd9\xc5\xc8\x56\x0d\x69\x78\x21\x14\xd7\x48\xf4\x5b\x2b\x90\x3a\x63\xb2\xd0\xd6\x05\x45\x34\xe1\x42\xc7\x22\xb5\x4b\xc3\xca\x48\xb7\x02\x31\x6e\x83\x3c\x9d\x5d\xf9\x0b\x06\x5b\x51\xd7\x6c\x0f\xd5\xfa\xa2\x62\xd6\x6e\xb4\x21\xde\x43\xa0\x6a\xb9\x35\x4d\x17\xf8\x04\xa8\x32\x4d\xb4\x79\xfe\x76\x3a\x3c\x1c\x41\xc1\x6c\x01\x3a\x8f\x7c\x8f\x65\xae\x66\xb2\x13\xb1\xcd\x02\x1e\x81\x19\xbd\x11\xb1\x12\x15\x6d\x0a\x21\x11\x84\x03\x2b\x9c\xf5\x54\x9d\x32\x24\xa4\x15\xd5\x45\xb1\xf4\xc0\x49\xe0\x81\xca\xb7\x77\x3e\x99\xce\x94\xb7\xd7\xe0\xe7\x1a\xad\xdb\x82\x93\xe4\xb6\xdb\x6b\xf5\x2b\x59\xe8\x73\xae\xd3\xd7\x16\x6d\x6f\xbb\xdf\xb2\x20\x45\x65\xc5\x4c\x80\x75\x37\x69\xd9\x1a\x79\xb8\x3c\xf4\xc6\xac\x12\xb5\x25\x3a\x5b\xe2\x84\x49\x91\xa1\x1f\x6a\xa5\x4e\x0e\xf1\xf8\xf8\xe0\xf8\xe4\x98\xb3\xe1\xf1\xde\xc1\xd1\xe0\x70\xc0\xf7\xf0\x70\x94\x1f\xf3\x6c\x34\x3c\x19\x1e\x1d\xed\x8f\xf6\xf6\xf9\x1e\x1f\x31\xb6\x58\x70\x3e\x1a\xb2\xc1\x00\xf3\xa3\xe1\x80\x0f\x0e\x0f\x86\xfc\xd8\x77\x0b\x62\x22\xc0\xa4\x67\xcd\x4e\xac\xbd\xcf\x76\xf0\x4b\x67\xcc\x98\xf2\xa8\xc8\xb4\x5e\x09\x8f\x6e\xe4\xdf\x60\xf5\xae\x20\x1f\x56\x46\x94\xcc\x34\x61\x39\x8b\xed\xc7\xc5\x90\xd0\xef\x0e\x25\x1e\x01\xf1\xab\x63\xf8\x5b\x6e\x15\x10\x4b\x41\x7e\x1e\x42\x42\x12\x3c\x20\x70\x4d\x40\xda\xc1\x6f\x00\x02\xc9\x08\xd5\x3a\x68\x5d\x33\x59\x63\x08\x8d\xb0\x31\xb4\xd4\x66\x6b\x47\xbd\xd0\xc3\x96\x05\x98\x0a\x17\x96\x19\x5d\x2f\x63\x1d\xd1\x65\x49\x81\x93\x54\x0c\x63\xa9\x0f\x77\xec\x70\x1c\xd2\xdf\x85\x3a\x94\xb2\xe6\x65\xfa\x77\x08\x10\x36\xc4\x33\xf8\x70\xf2\xfb\xa7\x9b\xd5\x63\xf9\xe6\xcb\xe3\x3f\xde\x94\x8f\x6f\x6f\x8a\xc7\xb7\x37\xe5\x76\xec\xb1\xc8\x86\x1f\xca\xc7\xf2\xcd\xea\x71\x39\x99\xc4\x92\xb8\x29\x84\x43\xba\x5c\xc4\xf2\x27\xb2\x9d\x3b\x0e\x5d\xc9\xab\x70\x39\x2d\x3b\xf4\x50\x59\x42\x2e\xaa\xc9\xf0\x38\x39\x38\x4c\x46\x47\xc9\xe0\xe8\x70\x77\x7c\x7f\x98\x0c\xf7\x4f\x92\xc1\xde\x49\x32\x38\xf4\xa5\xf7\xfc\xf6\xc3\xdc\xdf\x55\x7d\xb7\xe1\xb0\x68\xda\x17\x81\x84\x6c\x88\xb7\x24\xf2\xb1\x3f\xe9\xb6\xf4\x39\x0d\x39\x93\x96\xf4\x2a\x9d\x69\x63\x43\x29\xbf\x7a\x5e\xe6\x42\xd7\xf0\x0e\xf4\x3d\x9d\xb0\x16\xe9\x36\x23\x26\x14\x1f\x24\x88\x5d\xb4\x14\xbe\x1f\x59\xb2\xa0\x2a\x1e\x2f\x6b\x14\x15\xe1\x42\x22\xb5\x26\x85\x82\x13\x95\xf8\x34\x45\xc5\x2b\x2d\x94\xb3\xe4\xba\xac\x68\x57\xf8\xab\x1b\x17\x79\xd3\x1b\xb7\x24\xfe\x17\xca\xde\x78\x6f\xb4\x8e\xb9\x40\x36\xbc\x78\xa2\x16\xd1\xec\x1c\x1d\x35\xc6\x65\x78\x71\x21\x30\x87\xc2\x17\xf9\x88\x97\x44\x51\x0e\x87\x88\xe6\xbf\x12\x2d\x79\xf0\x5d\xf3\x4f\xa2\xbd\xb7\x17\xb7\xaf\x72\xa8\x0b\x5c\xd4\xcb\x57\x31\xd9\x4b\x06\xa9\x97\x4b\x72\x8e\xc4\x35\x4a\xea\x47\x1f\xfd\xfd\xd1\x7f\x86\x8b\xdf\xbf\x38\x2d\x24\xae\x92\xeb\x3e\x25\xb8\xc8\xb0\x0f\x1b\x66\x88\xae\xf4\x01\x8d\xd1\xa6\x0f\x99\x11\xbe\x60\xfd\xbb\x37\x26\x99\x7e\xff\x84\xb6\xfc\x8f\x57\x3a\xa9\x97\x1d\x17\x91\x7a\xf9\xcd\xfb\x4e\x2a\xf5\xb2\xbb\x54\xfb\x77\x8d\xf6\x12\x1a\xdf\x13\x08\x6f\x6f\xef\xee\x66\x54\x0d\x49\x50\xdb\x85\x6c\x02\x61\x4f\x1c\x8e\x84\x2e\xd2\xb4\x05\xb6\x09\xc2\x89\x72\xb8\x9d\x17\x8f\x58\xc1\x62\x31\xf1\xcf\x63\xbb\x72\x84\x0a\x57\x00\x5a\x4a\x0d\x60\xe1\x09\x4a\xfb\xdc\xc5\x9c\x4f\xd2\xd3\x34\xed\x18\xc1\xe9\xdf\xe2\x56\xb2\xfe\xef\xa9\xf7\x64\x5a\xd1\x18\x68\x95\x75\xac\x33\xf1\x5d\xc2\x2f\x9c\x8c\xf6\x46\x3e\x3d\x1e\x8c\x70\x08\xe7\xb3\xfb\x4e\x7b\x6c\x89\x9d\x71\xa1\x1d\xf7\xc6\x90\x55\x75\xbb\x3b\x75\x65\xb5\xf3\x44\x98\xd0\xf8\x7f\x02\x00\x00\xff\xff\x3b\x1d\x1e\x52\xd9\x15\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 5593, mode: os.FileMode(436), modTime: time.Unix(1573579992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
