// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x73\x1b\xb9\x11\xbd\xf3\x57\xf4\x61\xb7\x36\xa9\xe2\xce\x88\xb4\xbe\x19\xa6\x8a\xb6\xe4\x58\xb5\x5a\x89\xb1\x64\xcb\xab\x5b\x73\xd0\xe4\x20\xc2\x00\x63\x00\x43\x6a\x9c\x8a\x7f\x7b\xaa\x01\xcc\x90\x92\xe3\x9c\xac\x5a\xfb\x22\xe2\xab\x1b\xfd\x5e\x77\x3f\xcc\x04\x7e\xfd\xa1\xff\x06\x13\x38\x43\x8f\xe0\xc8\x7b\xa9\x57\x6e\xf0\xc3\x0d\x0c\x26\x70\x5b\x12\x08\x69\xa9\xf0\xc6\xb6\xe0\x0d\x38\x6f\x2c\x81\x08\x86\x9b\xa2\x04\x74\xe0\x4b\x02\x53\x93\x5e\xe0\x17\x44\x1b\xe6\x16\xe8\x68\x08\xb2\x5e\x3a\xa8\xc8\x23\x0f\x0d\x01\xb5\x18\x4c\xa0\x6e\x16\x4a\x16\x61\x55\xd6\x19\xa0\x25\x36\xca\x83\x74\xf0\x35\xcf\x76\x8e\x32\x1a\xe6\xd7\x37\x17\x9f\xe0\xfa\x86\xdc\x10\x7e\xba\xbc\x7e\x33\xbb\x9c\xcd\xe7\x67\xb3\xdb\x59\x7e\x5d\x93\x7e\xdd\xaf\xbb\x93\x5a\x98\x8d\x1b\x0e\x26\xf0\x35\xbf\x94\x0b\x8b\xb6\xcd\x67\x75\xad\x64\x81\x5e\x1a\x0d\x37\x4d\x5d\x1b\xeb\x9f\x6d\xfb\x1d\x0b\xb8\xbe\x09\xbe\xc1\x4f\xa5\xa9\x28\x7f\x62\x7e\x30\x81\xb9\x42\x7d\x92\x01\x9c\xeb\xb5\xb4\x46\x57\xa4\x3d\xac\xd1\x4a\x5c\x28\x72\x80\x96\x80\x1e\x6b\xd4\x82\x04\x38\xc3\xb1\x68\xa1\xc2\x16\x16\x04\x8d\x23\x91\x01\x5c\x5d\xdf\x9e\x9f\x76\xfe\x0d\x26\x40\xdf\x3d\xc8\xb7\xb5\x2c\x50\xa9\x16\x7e\xfe\x38\x7b\x7f\x31\x7b\x7d\x79\xfe\xf3\x10\x16\x8d\x4f\xc7\x36\xce\xf3\xb9\x58\x14\xe4\x1c\x09\xd8\x48\x5f\x0e\x26\xf0\x53\xb7\x18\x4a\xb2\x94\x01\xcc\x94\x33\x43\xf8\xca\xf1\xec\x7d\xf3\xe6\x69\xf8\x76\x62\xc6\x30\x30\x1c\x42\xda\xe9\x93\xf8\x0f\x06\x3f\x9e\x53\x13\xb8\x22\xbf\x31\xf6\xe1\x65\x79\xfb\xc1\x11\x78\x72\x5e\x93\xe7\xeb\xa5\x3f\xa7\xa3\x30\xa7\xe5\x9a\xac\x43\x05\x73\xd5\xac\x02\xf4\x73\x85\x2d\xfc\xe5\xc3\x5c\xcf\xff\x0a\xd8\x78\x53\xa1\x4f\x48\x70\x34\x22\xc5\x95\x74\x9e\x34\x30\x89\xc0\x2c\x3c\x4a\xcd\xae\xf3\x0c\x3d\x7a\xb2\x1a\x15\x5c\xcc\x01\x85\xb0\xe4\x1c\x2c\xad\xa9\xc0\x45\xce\x91\x00\x41\x6b\x59\x90\xcb\xe0\xb6\x94\x0e\x4c\x1d\x28\x29\xa4\x8b\xe0\xcb\xe0\xa4\x36\x4d\xad\xeb\xe8\xe3\x1f\xa6\x09\x34\x72\x35\x15\x72\xd9\x82\xd1\x04\xc6\x42\xc5\xc9\xe7\x36\x68\xab\xce\x10\x39\x86\x36\xf9\x66\x34\x2c\x8d\x05\xa9\x0b\x53\x49\xbd\x02\x1d\x43\x3d\x98\x40\x61\xb4\xa6\x82\xad\x06\x1f\xc8\xd1\xce\x01\x4c\x54\x26\x96\xd4\x80\xb0\x46\x25\x05\x54\x8d\xf2\x92\x57\xf0\x81\x15\x06\xff\x82\x5d\x1e\x9b\xe6\xb2\xde\xcf\xf7\xb2\xf0\x3f\xf7\x45\x9d\xef\xef\xed\x8d\x9e\xaf\x38\xcc\x4f\x4f\xbf\x3b\xf9\x74\xfb\xc9\xde\xde\x41\x1e\x92\xe3\x7f\x9f\xd0\xcd\xa7\x7a\xb1\x42\x4f\x1b\x6c\xfb\x58\x07\x67\x6b\x45\x8f\xe4\x60\x61\x7c\x19\x40\xb9\x98\xbf\xbd\xe9\x57\xce\xe6\x17\x01\xe7\xa7\xa5\x6a\x30\x09\x13\x66\x4d\x36\xcc\x38\xac\xfa\xb0\x84\x28\xed\x58\x70\x65\x8a\xd0\xf7\xe3\x93\x8c\x6d\xaf\x38\x1a\x1f\x85\x4b\x8e\xba\x30\x8c\xf9\x06\xaf\x8d\xf1\xce\x63\xbd\x03\x00\x27\x7f\x00\xc1\x1b\xf8\x97\x91\x3a\x78\x93\xc0\xcb\xe0\x5a\x83\xf3\x68\x7d\x1c\x35\x82\x60\x23\x95\x82\x0a\x1f\x68\x30\x01\xd3\xf8\x95\x61\xb0\x77\x20\xe6\x73\x78\xf1\x22\x98\xb2\x58\x43\x4d\x64\x5d\x08\x41\xc3\x99\x51\x52\xc5\x6b\x84\x74\x45\xb8\xbd\xf1\x25\x71\x38\xe2\xb2\x67\x0e\x0c\x26\xdb\x83\xb6\x97\x7b\xcc\xc2\xff\x1e\xe1\xbc\x1e\xd7\xf9\x68\x7c\xf6\xea\x37\x63\xee\x7e\xbb\xac\x3e\x9e\x7d\x39\x74\xe2\xcb\xef\xed\xa7\x51\xfb\xcf\xfa\x5c\xbc\x79\xf7\xfa\x48\xf8\xc7\xf6\xdc\x9e\x8c\x36\xf3\xb7\x57\xe6\xcd\xa7\x73\x37\x2e\x1f\xd6\x2f\x53\x64\x38\x4c\x37\xa9\xc2\xc0\xaf\x01\xcc\xa5\x51\xca\x6c\x38\x54\x31\xff\x5e\xae\x63\xea\xa6\x5a\x70\x54\x97\x60\xc9\xd5\x46\xa7\x2c\xdd\xa0\xf4\x21\x41\x37\x25\x69\xc6\x8f\x7d\xb9\x98\x5f\xdd\xc0\xe7\x86\xac\xec\xcb\x83\x74\x80\xe0\x2d\x0a\x32\xcb\x25\x47\x9f\xfc\x86\x28\x82\x82\x45\xd1\x58\x2c\x5a\x3e\x9c\x7f\xf3\xce\xb6\xe7\xb6\xab\x89\x04\x03\x26\x6b\xed\x3e\x37\xc6\x36\xd5\x34\x90\x8e\x79\xfe\xe1\xfd\x25\x7b\xc1\x04\x60\x27\xe8\xb1\x28\x51\xaf\x08\x2c\x7a\x36\xfd\x3b\xb7\x97\xc2\x68\x26\x74\x47\xa0\xd7\xd2\x17\x46\xea\xd9\x9a\x2c\xae\x68\x87\xeb\xdd\x66\xde\x5b\x5b\xb3\x96\x82\xec\xb4\xf4\xbe\x76\xa7\x79\xee\x65\xf1\x40\x76\xa7\x91\x64\xc6\xae\x72\xac\x25\x7b\x72\x16\x8b\x1e\xa0\x52\xb0\xd3\x8b\x2d\x29\xe4\x42\xb9\x6c\x74\xe0\x30\x2a\xe9\x5b\x36\x43\xb5\xdf\xe6\x73\x60\x3f\x5f\x36\xfe\x8a\x04\x95\x7a\x15\xaf\xbc\x74\x46\xab\x36\x16\xd0\x1f\x0c\x6c\x8c\xe0\x9f\x42\xa8\xae\x15\x6c\xa4\x2b\x19\x17\xd2\x21\x7e\x37\x37\x97\x5c\xef\x39\x34\xec\xda\x36\xfb\xb7\x24\x2a\xe5\xaa\xf4\xaa\x05\x4b\x85\xa9\x2a\x62\x1d\xc0\x71\x5a\x42\x6b\x9a\x50\x73\x6c\xa3\x35\xbb\x1f\xa8\x43\x36\x54\x02\xee\x01\x96\x2a\xe3\x09\x2a\x2c\x4a\xa9\x89\x35\xde\x12\xa5\x6a\x58\xa2\x44\xfe\xb0\x71\x2e\x42\x83\x09\xe3\x68\x36\x80\xba\xe5\x16\xe5\x4d\xe7\x08\xff\xc9\x40\x15\x46\x7b\x6b\x14\x9b\xb4\x01\xbe\x21\xb7\x27\xd5\x08\xb6\x2b\x2c\xca\xde\x81\x0d\x2a\x15\xbb\xb5\x73\x2a\x82\x78\xbb\xb5\xc6\x2e\x87\xb2\xa7\x29\xd6\x49\x54\xce\xf4\xed\x91\xf7\xd7\xe8\xcb\x90\x66\x7d\x0b\x28\xc8\xfa\xe0\xc4\x03\xb5\xb0\x94\x8a\x18\x20\xa6\x7e\x70\x86\x67\xe5\x92\xe5\x21\x25\xa3\x3c\xc2\xcb\xa6\x39\x9f\x95\x7b\x93\x3b\xa7\x32\x1e\x8d\xf3\x0f\xd4\x7e\x3b\xfd\x40\x6d\x97\xf6\x5b\x3e\x04\x35\xc7\x05\x18\x9d\x2c\x58\x51\x94\x50\x58\x12\xa4\xbd\x44\xe5\x82\x0f\x1d\x70\x09\x8e\x0e\xdd\xc6\x71\x51\xe7\x1d\xbc\x38\x6a\xd7\x0c\xae\x18\x0e\x5f\xa2\x0f\x6b\x83\x10\xe4\xc0\x84\x9b\x72\x74\x66\x57\x67\xcf\xf6\xf0\x59\xb5\x35\x9e\x0a\x76\xbe\x87\x34\xa2\x9c\xc1\x85\xff\xc5\xc5\x10\x32\x49\x76\x39\xb2\x35\xc3\x16\x9e\x1d\x4a\x6b\x62\x4d\x6c\x34\x28\x53\xa0\x2a\x8d\xf3\xd1\x10\x4f\xf8\xd8\x46\xd8\xec\xca\x62\x95\x34\x50\x54\xab\x1d\xc8\xb3\xf9\x45\x50\xfd\xf8\xc0\xad\xac\xbb\x54\x17\x8b\x1a\x9d\xdb\x18\xcb\x62\x84\x49\xd5\x09\x5e\x9e\x2e\xe9\x11\x48\x17\x86\xb5\xec\xcd\xbb\xd9\xf8\xe0\x10\x4a\x74\x25\x98\x65\x12\x61\x58\xf8\x06\x55\x7f\xc4\x36\x0b\x44\x22\x66\x8a\x46\xe2\x4a\x32\xb4\x29\xa5\x22\x90\x1e\x9c\xf4\x2e\xe8\x67\xce\x90\x98\x56\x5c\x0b\xe5\x2a\x10\x27\x83\x3b\x2e\xd9\x21\xf8\xec\x3a\xea\xe0\xaf\xa5\xcf\x0d\x39\xbf\x25\x27\x9f\xdb\x6d\x6f\xf4\xaf\xec\x61\xc8\xb9\xde\x5e\x57\xa8\x83\xef\x61\xcb\x82\x0d\x55\x35\xda\x48\xeb\x7e\xd2\xe1\x9a\x44\x54\xf4\x83\x09\xd6\xb2\x71\xac\x31\x2b\x9a\xa2\x92\x05\x85\xa1\xee\xd4\xe9\x01\x1d\x1f\xef\x1f\x9f\x1c\x0b\x1c\x1f\xef\xed\x1f\x8d\x0e\x46\x62\x8f\x0e\x0e\x97\xc7\xa2\x38\x1c\x9f\x8c\x8f\x8e\x5e\x1d\xee\xbd\x12\x7b\xe2\x10\x71\xb1\x10\xe2\x70\x8c\xa3\x11\x2d\x8f\xc6\x23\x31\x3a\xd8\x1f\x8b\xe3\xd0\x21\x58\x1e\x00\xaa\x20\x65\xbd\x5c\x87\x98\xed\xf0\x97\xef\x58\xa0\x0e\xac\x28\x8c\x79\x90\x81\xdd\x24\xbe\xe1\xea\x6d\xc9\x31\xac\xad\xac\xd0\xb6\x71\x39\xa6\x96\xe3\x13\x24\xfc\x77\xcf\x92\xc0\x80\xf4\xab\x97\xdd\x5b\xc1\x13\x19\xcb\x20\x3f\x85\x90\x99\x04\x77\x04\xc2\x30\x91\x76\xf8\x1b\x89\xc0\x67\xc4\x6a\x1d\xad\xae\x51\x35\x14\xa1\x91\x2e\x41\xcb\xad\xb5\xf1\xdc\xff\x02\x6d\x31\xd2\x54\xfa\xb8\xcc\x9a\x66\x95\xea\x88\xa9\x2a\x06\x4e\x71\x31\x4c\xa5\x3e\x3e\x7c\xe3\x75\xd8\x7e\x0f\x75\x2c\x65\xed\xf3\xf4\xef\x19\x20\x5d\xc4\x33\xc6\x70\xfa\xc7\xa7\xab\x87\xfb\xea\xed\x97\xfb\x7f\xbc\xad\xee\xdf\x5d\x95\xf7\xef\xae\xaa\xed\xd8\x7d\x59\x8c\xdf\x57\xf7\xd5\xdb\x87\xfb\xd5\x74\x9a\x4a\xe2\xa6\x94\x9e\x58\xf1\xa7\xf2\x27\x8b\x9d\x87\x07\xbf\x93\xeb\xf8\x62\xac\x7a\xf6\x70\x59\x22\x21\xeb\xe9\xf8\x38\xdb\x3f\xc8\x0e\x8f\xb2\xd1\xd1\xc1\xee\xf8\xab\x71\x36\x7e\x75\x92\x8d\xf6\x4e\xb2\xd1\x41\x28\xbd\x6f\xae\xdf\xdf\x84\x07\x64\xe8\x36\x02\x16\x6d\xf7\x4c\xcf\xd8\x87\xf4\x74\xe1\x18\x87\x9b\x6e\x4b\x9f\x37\xb0\x44\xe5\xd8\xae\x36\x85\xb1\x2e\x96\xf2\x8b\xa7\x65\x2e\x76\x8d\x10\xc0\xd0\xd3\x99\x6b\x49\x03\x23\xab\x9f\xf4\x95\x80\x15\x45\xa7\xab\x87\x49\xba\x4a\xae\xe2\xe9\x05\xc5\xa8\x48\x1f\x13\xa9\x73\x29\x16\x9c\x64\x24\xa4\x29\x69\x51\x1b\xa9\xbd\xe3\xd0\x15\x65\xb7\x22\xbc\xa7\x84\x5c\xb6\x83\x49\xa7\xac\x7f\xe1\xec\x4d\x8f\x39\xe7\xd1\x47\xb1\x11\x8e\x67\x69\x91\xdc\x5e\x92\xe7\xc6\xb8\x8a\x9f\x41\x98\xcc\xb1\xf0\x25\x3d\x12\x4e\x62\x94\xe3\x25\x92\xfb\x2f\x24\x4b\xee\x42\xd7\xfc\x93\xa4\xee\xf5\xd9\xf5\x8b\x5c\xea\x8c\x16\xcd\xea\x45\x5c\x0e\x27\x83\x32\xab\x15\x07\x47\xd1\x9a\x14\xf7\xa3\x8f\xe1\x51\x17\x7e\xc6\xd7\xd8\xbf\x05\x2f\x64\xad\xb2\x34\x43\x4e\x70\x59\xd0\x10\x36\x68\x59\xae\x0c\x81\xac\x35\x76\x08\x85\x95\xa1\x60\xfd\x67\x30\xe1\x33\xc3\xfe\x29\x6f\xf9\x3f\x9f\xce\x94\x59\xf5\x5a\x44\x99\xd5\x37\x1f\x5d\x72\x65\x56\xfd\x4b\x37\x7c\x6c\xe8\x5e\x86\xe9\x91\xcf\x7c\x7b\x77\x7b\x3b\xe7\x6a\xc8\x07\x75\x5d\xc8\x65\x10\xf7\xa4\xe1\x24\xe8\x92\x4c\x5b\x50\x97\x20\x82\x25\x87\xdf\xf9\x0c\x91\x2a\x58\x2a\x26\xe1\x9b\xd5\xee\x39\x52\x47\xd9\xcf\x4b\xb9\x01\x2c\x82\x40\xe9\xbe\x41\xa1\x0f\x49\x7a\x9a\xe7\xbd\x22\x38\xfd\x5b\xda\xca\xde\xff\x3d\x0f\x91\xcc\x6b\x1e\x03\xa3\x8b\x5e\x75\x66\xa1\x4b\x84\x85\xd3\xc3\xbd\xc3\x90\x1e\x77\x56\x7a\x82\x37\xf3\x0f\xbd\xf5\xd4\x12\x7b\xe7\x62\x3b\x1e\x4c\xa0\xa8\x9b\x6e\x77\xee\xab\x7a\xe7\xbb\x5d\xc6\xe3\xff\x0d\x00\x00\xff\xff\x76\xea\x1f\x5c\x6e\x15\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 5486, mode: os.FileMode(436), modTime: time.Unix(1573583511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

