// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5b\x73\x1b\xb7\x92\x7e\xe7\xaf\xe8\x87\x9c\x3a\xbb\x55\xf2\x50\xa2\x2d\xf9\xc2\xe5\x56\xd1\x96\x1c\xab\xe2\x48\x2c\x51\x8e\x73\xf4\x06\x0e\x7a\x38\x58\x61\x80\x09\x80\x21\xcd\xb3\xb5\xf9\xed\x5b\xdd\x00\x66\x86\x4a\x7c\x1e\xb6\xec\xca\xda\x0f\x96\x70\xe9\x6e\xf4\xf5\xeb\x1e\xcf\xe1\xd9\x37\xfd\x33\x99\xc3\xa5\x08\x02\x3c\x86\xa0\xcc\xd6\x4f\xbe\x39\x83\xc9\x1c\xee\x6b\x04\xa9\x1c\x96\xc1\xba\x03\x04\x0b\x3e\x58\x87\x20\x99\x71\x57\xd6\x20\x3c\x84\x1a\xc1\xb6\x68\x36\xe2\x9f\x42\x38\xde\xdb\x08\x8f\x27\xa0\xda\xca\x43\x83\x41\xd0\xd2\x09\x08\x23\x27\x73\x68\xbb\x8d\x56\x25\x9f\x2a\x32\x03\xac\x44\xa7\x03\x28\x0f\xbf\x4f\x8b\x11\x29\x6b\x60\x75\xbb\xbe\xfe\x15\x6e\xd7\xe8\x4f\xe0\x87\x8f\xb7\xef\x96\x1f\x97\xab\xd5\xe5\xf2\x7e\x39\xbd\x6d\xd1\xbc\xed\xcf\x7d\x56\x46\xda\xbd\x3f\x99\xcc\xe1\xf7\xe9\x47\xb5\x71\xc2\x1d\xa6\xcb\xb6\xd5\xaa\x14\x41\x59\x03\xeb\xae\x6d\xad\x0b\x4f\xae\xfd\x2c\x4a\xb8\x5d\xb3\x6c\xf0\x43\x6d\x1b\x9c\x1e\xb1\x9f\xcc\x61\xa5\x85\x79\x5d\x00\x5c\x99\x9d\x72\xd6\x34\x68\x02\xec\x84\x53\x62\xa3\xd1\x83\x70\x08\xf8\xa5\x15\x46\xa2\x04\x6f\x49\x17\x07\x68\xc4\x01\x36\x08\x9d\x47\x59\x00\xdc\xdc\xde\x5f\xbd\xc9\xf2\x4d\xe6\x80\x5f\x25\x14\x0e\xad\x2a\x85\xd6\x07\xf8\xdb\x2f\xcb\xbb\xeb\xe5\xdb\x8f\x57\x7f\x3b\x81\x4d\x17\x12\xd9\xce\x07\xa2\x2b\xca\x12\xbd\x47\x09\x7b\x15\xea\xc9\x1c\x7e\xc8\x87\xa1\x46\x87\x05\xc0\x52\x7b\x7b\x02\xbf\x93\x3e\x7b\xd9\x82\x3d\x56\xdf\x48\x67\x64\x06\x32\x87\x54\x6e\x71\xa4\xff\xc9\xe4\xdb\xfb\xd4\x1c\x6e\x30\xec\xad\x7b\xfc\xbe\x7e\xfb\xc9\x23\x04\xf4\xc1\x60\xa0\xe7\xa5\x1f\x17\x67\xbc\x67\xd4\x0e\x9d\x17\x1a\x56\xba\xdb\xb2\xe9\x57\x5a\x1c\xe0\xdf\x3e\xad\xcc\xea\xdf\x41\x74\xc1\x36\x22\x24\x4b\x90\x36\xa2\x8b\x6b\xe5\x03\x1a\x20\x27\x02\xbb\x09\x42\x19\x12\x9d\x76\xf0\x4b\x40\x67\x84\x86\xeb\x15\x08\x29\x1d\x7a\x0f\x95\xb3\x0d\xf8\xe8\x73\x28\x41\xe2\x4e\x95\xe8\x0b\xb8\xaf\x95\x07\xdb\xb2\x4b\x4a\xe5\xa3\xf1\x15\x0b\x69\x6c\xd7\x9a\x36\xca\xf8\x0f\xdb\xb1\x1b\xf9\x16\x4b\x55\x1d\xc0\x1a\x04\xeb\xa0\xa1\xe0\xf3\x7b\xe1\x9a\xcc\x08\x3d\x99\x36\xc9\x66\x0d\x54\xd6\x81\x32\xa5\x6d\x94\xd9\x82\x89\xaa\x9e\xcc\xa1\xb4\xc6\x60\x49\x5c\x59\x06\xf4\x38\x22\x40\x8e\x4a\x8e\xa5\x0c\x08\xd8\x09\xad\x24\x34\x9d\x0e\x8a\x4e\x10\xc1\x46\xb0\x7c\xcc\x97\xd6\x16\x53\xd5\xbe\x98\x9e\x16\xfc\x77\x1a\xca\x76\xfa\xe2\xf4\xf4\xec\xe9\x89\x8b\xe9\x9b\x37\x5f\xdd\x3c\xbe\xfe\xfa\xf4\xf4\x7c\xca\xc1\xf1\xe7\x14\xf2\x7e\xca\x17\x5b\x11\x70\x2f\x0e\xbd\xae\x59\xd8\x56\xe3\x17\xf4\xb0\xb1\xa1\x66\xa3\x5c\xaf\xde\xaf\xfb\x93\xcb\xd5\x35\xdb\xf9\x38\x55\x4d\xe6\xbc\x61\x77\xe8\x78\xc7\x8b\xa6\x57\x0b\x6b\x69\xc4\xc1\xd7\x49\x43\x5f\xd7\x4f\x62\x36\x3c\xf1\x6c\xf6\x92\x1f\x79\x96\xd5\x30\xa3\x17\xbc\xb5\x36\xf8\x20\xda\x91\x01\x28\xf8\xd9\x08\xc1\xc2\x7f\x59\x65\x58\x9a\x64\xbc\x02\x6e\x0d\xf8\x20\x5c\x88\xab\x56\x22\xec\x95\xd6\xd0\x88\x47\x9c\xcc\xc1\x76\x61\x6b\xc9\xd8\x23\x13\x13\x1d\x3a\xbc\x61\x56\x4e\xb4\xd0\x22\x3a\xcf\x2a\xe8\x28\x32\x6a\x6c\xe8\x8c\x54\xbe\xe4\xd7\xdb\x50\x23\xa9\x23\x1e\x7b\x22\xc0\x64\x3e\x10\x1a\x1e\xf7\xa5\xe0\xbf\xbd\x85\xa7\xed\xac\x9d\x9e\xcd\x2e\x9f\xff\x64\xed\xe7\xb7\x57\xeb\x72\x16\xd6\x66\xf7\xcb\x1d\x36\x3f\x79\x7f\xf9\xb3\xfa\xe9\xe3\x03\xfe\x54\x7d\xba\xab\xf7\xbf\x8a\xfd\xc3\x67\xa1\xec\x6f\x7e\xf5\x7c\x77\xb6\x27\x9d\xac\xb9\xaa\x90\x78\x95\x75\x7b\xe1\x24\x78\x74\x3b\x16\x79\xa4\x1a\x87\x25\xaa\x1d\x42\x83\xde\x8b\x2d\x7a\xd8\xd7\xe4\xf4\x55\xa5\x95\xc1\x02\x56\x88\xee\xfa\x92\xbd\x88\xa3\x46\xa1\xe4\x8c\x18\xd5\xb5\x41\xca\x38\xf9\x6d\xad\xb3\x95\xd2\x91\x25\x3f\x9e\x15\xeb\xe3\xd1\x58\xe3\x32\x97\xc9\x9c\x13\x6d\x54\x9a\xaa\x62\x2e\x2e\x85\x31\x36\x64\x9d\x47\x7d\x2b\xcf\x44\x72\x7c\x8d\x5f\x10\x48\xd0\xdf\x3a\x74\x07\x0a\xf8\xc9\xbc\x77\xc6\xc1\x9c\xd2\xee\x8d\xb6\x42\x0e\xaf\xe3\x14\x42\x5c\x8b\xc9\xdc\x9b\x2a\xd2\x5b\xfc\x5f\x55\xfc\x8d\x73\xec\x1c\xee\xad\xfb\xbe\x39\x7c\xf1\x4d\xff\x4c\xe6\xf0\xb5\x3f\x9f\x97\x77\x37\xd7\x37\x3f\xc2\xb3\x67\x70\xb9\xbc\xf9\xf1\xea\x0e\x1e\x6e\x6f\xae\xe8\xd7\xb4\x33\x99\xc3\x08\x36\x74\x9c\x74\x73\xbe\xa0\x90\x81\xeb\x4b\x4e\xbc\x82\x9c\x07\xbd\x8f\x69\xf6\xba\x82\x83\xed\x8e\x7d\x04\x47\x84\x28\xe5\xa7\x5a\x88\x3b\xce\xde\x25\x66\xff\x2c\x35\x0a\x77\x42\xf7\x1d\x38\x3c\x2e\x2d\x09\x5e\xb4\xe8\x1a\x61\xd0\x04\x4d\x88\xa3\x6d\x63\x8c\xd0\x8d\x14\xc8\x24\x15\xf9\xd9\x4e\x79\xb5\xd1\x48\xbb\x31\xbe\xed\x93\x04\x93\x04\x25\x47\x55\x26\xa0\x91\x94\x4e\x82\xe5\x54\x41\x56\x0e\x16\x1a\xe1\xa9\x8c\xb0\x3c\x83\x28\x2c\x60\xc4\x25\x37\x57\xbf\x5c\xdd\xa5\x3c\x35\xd2\x15\x45\x8e\xed\x02\x74\x9e\x68\xde\x5b\x57\xc0\x8d\x0d\xf9\xbd\x24\xc6\x64\x0e\x95\x72\x3e\xc4\xbb\x05\x33\xcc\x48\xa7\xb4\xa6\x52\xdb\xce\xa1\xcc\xa9\x4b\xd2\x2d\xdc\xa1\x3b\x00\x51\xd4\x18\xaf\x75\x6d\x7e\x05\xc5\x56\x59\x2a\x89\x26\x70\xfd\xe6\x6d\x94\xff\x52\xa6\xf8\x8c\x9f\x3f\xad\xef\x41\xa2\xc6\x80\xf1\x9d\x0c\x72\x7b\xf0\x9b\x82\x36\xbe\x90\x92\x66\x01\x97\x74\x98\x75\x55\xe3\x93\xd3\x31\xa6\x2b\xeb\xca\xb1\xc5\xb3\x52\xe9\x60\x55\xa1\x43\x13\x06\x5b\x15\x5c\xf4\xf9\x9e\xb6\x74\xc8\x1c\xb8\xae\x53\x7c\x9d\x80\x75\x12\x1d\xff\x0b\xa5\x55\xc6\xb3\xc8\xb5\xd8\x91\x17\xee\x50\x52\x62\xa2\x15\x69\xc1\xdb\xe2\xdb\x07\x4f\x8a\xf7\xa6\x4f\x57\x51\x0f\xc2\x00\x36\x1b\x94\x84\x30\x69\x5f\x0a\x6c\xac\xa1\xec\xfa\xe5\x10\x4b\x71\x8f\x45\x38\xd3\xfe\x49\xad\xa2\x12\x96\x0b\x30\x91\xe8\xbd\x92\x91\x12\x33\xe4\x80\xa3\x3d\xfc\x52\xea\xce\xab\x1d\xea\x03\xd3\xa3\x14\xdc\x47\x0b\xfb\xae\xcb\x80\xcf\xba\x08\xa4\x2e\x3b\xc1\xc2\x96\x8f\x23\xe1\x09\x41\xb7\x61\x90\xed\xa8\x74\xd6\xd6\x75\xdb\x3a\x4a\x4f\x4c\x97\x37\x97\x03\x93\xc9\x7c\x60\x43\x79\xde\x61\xc5\xfd\x50\x27\xf4\x88\x89\xf2\x84\xfa\xa1\x75\x6a\x27\x02\x16\x70\xfb\x67\x35\x3a\x55\xa5\xc9\x1c\x1a\x21\x71\x50\xc2\xf1\x63\xa0\x33\x9a\x82\x3e\x08\xfd\x98\xc2\x52\xc4\xaa\xe1\x3a\x63\x68\x65\xac\x94\x0d\xd6\x8a\xbb\x2c\x8a\x34\x82\xf5\x59\xae\xa8\x8c\x6f\x9c\xa3\xe7\x70\x43\x82\xac\x53\x11\x80\x67\x8c\x99\x2a\xab\xb5\xdd\x93\x64\x11\xe6\x7e\xbf\xc6\xd4\x74\xcd\x86\xc0\x4b\x05\x0e\x7d\x6b\x4d\x02\xc3\x7b\xa1\x02\xa7\x63\x86\x07\x8d\x60\xbd\x5d\xaf\x6e\xd6\x5c\x81\x55\x8f\xc2\x95\x07\x01\xc1\x09\x89\xb6\xaa\x08\xe4\x60\xd8\x23\xc6\xdc\x28\xca\xb2\x73\xa2\x3c\x10\x71\xfa\x9d\x6b\x77\x5f\xb5\x7d\x8b\x28\x49\xbf\xaa\x35\xfe\xb7\xce\xba\xae\x59\x30\xb6\xbb\x8c\x88\x9e\x0f\x51\xa0\xdb\x2a\x32\x5e\x75\x1b\xdf\x6d\x62\x84\xb7\xce\x6e\xc4\x46\x1f\x60\x2f\x0c\x57\x05\x99\xc0\x43\x0c\xe1\x88\x44\x48\x38\x76\x19\x62\x92\x7e\xa4\xb3\x1b\xcc\x0f\x12\xa0\x85\xdb\x8e\x95\x30\x7e\x22\xf5\xe5\x2a\x44\x1f\x23\x41\xd8\x87\x1a\x6c\x6c\x7c\x05\xbd\x56\x18\xb9\x57\x32\xd4\xb1\xf5\xa0\x97\xb4\x3e\xba\x09\x81\xe2\x4f\x77\x1f\x73\xb6\xaa\x62\xe4\xd5\xc2\x6c\x11\x9c\x08\xa4\xc0\x9f\x29\x43\x53\x7a\xb6\xae\xc9\x95\xed\xad\x0a\x94\x9a\x96\x3b\x74\x62\x8b\x23\x60\x9c\x2f\xd3\xdd\xd6\xd9\x9d\x92\xe8\x16\x75\x08\xad\x7f\x33\x9d\x06\x55\x3e\xa2\x1b\x75\x9d\x85\x75\xdb\xa9\x68\xd5\x58\x9f\x54\x58\x47\x69\xd4\xa1\x16\x94\xd4\xab\xce\x70\x30\x09\xad\xc2\x81\xd8\x50\x54\xf7\xe0\x9f\xf5\x48\x26\x8b\xbf\xc5\xbc\xa2\xcc\x36\x1a\xae\xf2\xd6\xe8\x43\x7a\x70\xdb\xa2\x91\x20\xa0\xb4\x0d\xf7\xe5\xe9\x45\x9d\x47\x07\x62\x4b\x2b\x19\x37\x0e\xd3\x8b\x21\xd9\x17\x93\x79\x27\xd2\xd5\x45\xfa\xf7\xbb\x84\x1b\x19\xe6\x2f\x89\xb6\xdc\x8e\xee\x95\xaf\x49\x39\x68\xd8\x2c\xeb\xf5\xc7\x0c\x26\x48\xb4\x21\xbb\x0d\x11\x56\xab\x6d\x4d\x08\xc5\x61\x54\x8c\x44\x72\x3e\x35\x20\x8e\x9c\xc6\x38\xae\x18\xe2\x12\x49\x01\x0e\x1b\x1b\xc8\xdb\xcb\x5a\x19\x24\x7f\xae\x84\xd2\x9d\xc3\xec\x96\xc4\x9c\xfc\x9b\x0a\x33\xe9\x80\x0a\x26\xb5\xc9\xc1\x8e\x21\x17\xd9\xbf\xb4\x26\x38\xab\x87\xe8\x3a\xa1\xd4\xaf\x3b\xc6\x39\xd2\x09\xd5\x0b\xb0\x17\x5a\xc7\x02\xe2\xbd\x8e\xbe\x71\x3f\x70\x3b\xe4\xfa\x6c\x30\x82\x2d\xa1\xbd\xed\x5b\x74\x76\x0f\x11\x6a\xce\x41\x7d\x1b\x5a\x22\x97\x49\x09\x8f\x78\x00\x6a\x39\xc8\x40\x14\x51\x2c\x0c\xed\xaa\x4a\x95\x54\x25\x22\x53\x5a\xa1\x63\x8b\x29\xd1\x9a\x06\x3b\xf5\x5e\x17\xb4\x1a\xf7\x1f\xf1\xf0\xc7\xed\x47\x3c\xe4\x9c\x38\xf8\x43\xea\x3b\x60\x23\xbc\x2a\x41\x74\xa1\x86\xd2\x21\x01\x23\x25\xb4\x67\x19\xb2\xe1\x92\x39\xb2\x75\x3b\xcf\x2d\x4a\x47\x5d\x4b\x48\xf3\x33\xc6\x6d\x44\x50\x84\x01\xf4\x91\x62\xf8\xa5\xa4\x1d\xaa\x93\xc7\x77\x18\x71\x3a\x1b\xb0\x24\xe1\x7b\x93\x46\x2b\x17\x70\x1d\xfe\xee\xa3\x0a\xc9\x49\xc6\x3e\x32\xb0\x61\xb4\x74\x4c\x94\xb0\x23\x81\x06\x03\xda\x96\x42\xd7\xd6\x87\xc8\x88\x36\x42\xea\xe6\x5a\x67\xb7\x4e\x34\xa9\x89\x8a\x13\xb3\x6c\xe4\xe5\xea\x9a\x27\x8f\xe2\x91\xfa\xaf\xfc\xa8\xac\x8b\x56\x78\xbf\xb7\x4e\xc2\x06\xc9\xa9\x32\x14\xa5\xed\x1a\xbf\x00\x9a\xd2\x12\xda\x59\x7f\x58\xce\xce\x2f\xa0\x16\xbe\x06\x5b\xa5\x41\x90\x28\x03\xc1\x8d\x4c\x62\x88\x02\x99\x1c\x33\x69\x23\xf9\x4a\x62\xb4\xaf\xa9\x13\x55\x01\xbc\x0a\x9e\x3b\x56\x46\x19\xd1\x7d\x18\x01\xb3\xe3\x14\xf0\x99\xea\x19\x2b\x9f\x44\x17\x86\xe5\x75\xf8\x5b\x87\x3e\x0c\xce\x49\x74\xf3\xf5\xce\x3c\x23\x09\x39\xe6\x7a\x7e\xb9\x8a\xb1\xec\xb9\x37\x2e\x6d\xd3\x0a\x17\xdd\xba\xdf\x8c\xd0\x92\xa7\x8a\x93\xb9\x68\x15\xe5\x43\x23\x1a\x5c\x08\xad\x4a\xe4\xa5\x4c\x75\x71\x8e\xaf\x5e\xbd\x78\xf5\xfa\x95\x14\xb3\x57\xa7\x2f\x5e\x9e\x9d\x9f\xc9\x53\x3c\xbf\xa8\x5e\xc9\xf2\x62\xf6\x7a\xf6\xf2\xe5\xf3\x8b\xd3\xe7\xf2\x54\x5e\x08\xb1\xd9\x48\x79\x31\x13\x67\x67\x58\xbd\x9c\x9d\xc9\xb3\xf3\x17\x33\xf9\x8a\xf3\xb0\xa7\x57\x09\xcd\xe3\xb4\x40\xad\x3e\x85\xd2\xe0\xbf\xdc\x4e\x09\xc3\x5e\x51\x5a\xfb\xa8\xd8\xbb\xa9\x3b\x78\xe2\xab\xf7\xdc\x57\xb4\x4e\x35\xc2\x1d\xe2\x71\x91\x2a\x59\x48\x26\xa1\x9f\x7b\x2f\x61\x0f\x48\xbf\xf5\xa3\xbf\x61\xe8\x12\x3d\x96\x61\xe5\x91\x09\xc9\x93\xe0\x33\x52\x05\x27\x28\x3a\xf8\x6f\x74\x04\xa2\x11\xb3\x75\xe4\xba\x13\xba\x4b\x1d\x9e\xf2\xc9\xb4\x54\x89\xbb\x40\x65\x95\xdd\x56\x44\x37\x55\xa9\xe0\x38\x4b\x50\x34\x3a\x42\xd3\x90\xe1\x34\x25\xc3\x94\xea\xe3\xf0\x3d\x3e\x87\xf8\xf7\xa6\x8e\xa9\xec\xf0\x34\xfc\x7b\x0f\x50\x3e\xda\x33\xea\x70\xf1\x8f\x5f\x6f\x1e\x1f\x9a\xf7\xff\x7c\xf8\xf1\x7d\xf3\xf0\xe1\xa6\x7e\xf8\x70\xd3\x0c\x6b\x0f\x75\x39\xbb\x6b\x1e\x9a\xf7\x8f\x0f\xdb\xdc\x09\x90\xcf\x06\xa4\xee\x24\xcf\x5a\xca\x51\x5b\x88\xfe\x04\xda\x38\xb5\x6e\x7a\xef\xa1\xb4\x84\x52\xb5\x8b\xd9\xab\xe2\xc5\x79\x71\xf1\xb2\x38\x7b\x79\x3e\x5e\x7f\x3e\x2b\x66\xcf\x5f\x17\x67\xa7\xaf\x8b\xb3\x73\x4e\xbd\xef\x6e\xef\xd6\x3c\xc4\xe6\x6a\x23\x61\x73\xc8\x9f\x0a\xa8\x4d\xcc\xe3\x53\x1e\xeb\x84\xa3\xd4\x17\x2c\x54\x42\x7b\xe2\x6b\x6c\x69\x5d\xc2\x35\xd7\xc7\x69\x2e\x56\x8d\x7e\x6e\x93\xe0\x15\x37\x99\x82\xa0\x61\xaa\xf5\x04\x54\xf2\x6c\xef\x24\x8d\xcf\x14\xb7\x2d\x71\x8a\x4b\x56\xc9\x50\x2b\x8b\x14\x13\x4e\x62\xc2\x61\x8a\x46\xb6\x56\x99\xe0\x49\x75\x65\x9d\x4f\xc4\x9e\x4a\x55\x87\xc9\x3c\x8f\x83\xfe\xee\x13\xf8\x8f\x8d\x4b\x88\x18\x86\xc9\x13\x62\x49\x62\x57\x18\xa8\x30\x6e\x23\x14\x21\x67\x4e\x63\xac\x34\x51\xe0\x71\x56\x31\x99\xc7\x47\x24\xf1\xbf\x53\x17\xf0\x99\xab\xe6\x5f\x83\x4c\xae\x4c\x0f\xb8\x07\x86\xb1\x8c\xc7\x18\x27\x83\x29\x33\x42\x8f\x3c\x50\xa5\xe6\x3a\x19\x4b\xe6\xe3\x3c\xe8\x8b\xd9\x90\x2a\x15\xa5\xbe\x3c\x82\x4b\x1d\x23\x4a\x28\x3b\xe7\xd0\x94\x04\xb1\xa9\x16\x89\xb2\xce\x4d\x7a\x31\x49\x7e\x1a\xc9\x2d\xde\xbe\xfb\xf0\x74\xe5\xfe\xdd\x93\x95\x8f\x7f\x58\x79\xb8\x7a\x37\x99\x1f\x2f\x5d\xdd\x7f\xf8\x2e\x66\x8b\x43\xd7\xa5\x91\xf0\x3e\x0d\x5d\xd7\x11\x7f\xfd\x75\x86\xec\x81\x20\x89\xf6\x4c\x18\xf9\xec\x78\x1e\x9c\xda\xf7\x3f\x06\xae\xad\x2a\x74\x69\x70\x1b\xfb\x9b\xf1\x45\x55\x62\x3f\x13\x1f\xc6\xea\x4f\xc7\xbe\x1b\x04\x91\xe7\x64\x9d\xaf\x87\x41\x6c\x1c\x8a\x61\xa2\x9a\x07\xce\xa3\x99\x7a\xa8\xad\xc7\xaf\x90\x72\x18\x9c\xc2\x5d\x74\xd1\xe3\xc9\x75\xa8\xf1\xc0\xdf\x66\x1a\x4a\xd3\xe5\x23\xc5\x37\x4f\xb2\x13\xd4\xca\x3d\x6a\x6b\xf7\xe8\x62\x33\x92\xea\x49\x01\x77\x3d\x6c\x56\x3e\x2b\xc7\xd7\xb6\xd3\x9c\xff\xfb\x0f\x89\x1b\x8c\xd8\x83\x21\xf5\xc6\x7e\x89\xa3\x6c\x01\xda\x06\x6a\x19\x23\xe5\x38\xd7\xb2\xdc\xb5\x09\x9f\x10\x06\xdf\xa5\xd5\xd8\x84\x0a\xd8\x5a\x2b\x41\xa2\xd0\x74\x31\x7d\xbe\x8d\x8e\x3a\x1a\x4e\xf7\xc3\xfc\x3f\x31\x5e\x1c\x85\x8b\xd1\x28\x32\x4a\xc3\x41\x14\xb3\x57\x06\xa5\x6d\xe7\x5a\x1b\xfb\x67\x87\xe9\x1b\x2e\x8b\xc1\x7c\x9f\x26\xf2\x81\x14\x85\x75\xa4\x94\x59\x66\xc8\x80\x94\x52\x89\xb6\x72\x79\xe0\xe6\x73\x6d\xf2\xa6\xa2\xa5\xff\x3f\xa3\xf5\x4b\xdc\x74\xdb\xef\x12\x65\x4c\x19\xb4\xdd\x6e\xc9\x79\x34\xee\x50\x13\x16\xfe\x85\x3f\x6a\xf1\xaf\xd1\x4a\xff\x2d\xe9\x20\xf5\x49\x95\x3d\x21\x70\xa1\x4a\x3c\x81\xbd\x70\xe4\x74\x27\x80\xce\x59\x77\x02\xa5\x53\x0c\x96\xfe\x67\x32\x27\x9a\x7c\x7f\x41\x57\xfe\xc5\x7f\x1d\xd0\x76\xdb\xf7\x41\xda\x6e\xff\xf0\xd1\x79\xaa\xed\xb6\xff\xd2\xc7\x1f\x5b\xf3\xe7\x9f\xf4\x91\x93\x7c\xe4\xc3\xfd\xfd\xaa\xff\x86\x93\x10\xb0\x2f\x20\xde\x49\xcb\xa3\x8c\xc1\xc3\x9d\x21\xdf\xf3\x47\x9c\xe1\x33\x6c\x42\x4f\xfd\x47\xa3\x27\x74\x94\x89\x93\x0c\x3a\x4a\x9e\xc4\x23\xbb\xfe\x1b\xbc\x08\x0c\x10\xde\x4c\xa7\x7d\x37\xf2\xe6\x3f\xd2\x55\x92\xfe\x3f\xa7\xac\xc9\x69\x4b\x6b\x71\xc4\x9f\x3a\xde\x82\x11\x2a\x1f\x5c\x5c\x9c\x5e\x70\xe8\x7c\x76\x2a\x20\xbc\x5b\x7d\xea\xb9\xa7\xac\x35\x7c\xd1\xe2\x56\x80\xb2\x46\xdb\xe5\xdb\xd3\xd0\xb4\xa3\xff\xb7\x50\xd0\xfa\xff\x06\x00\x00\xff\xff\x33\xf7\x66\xde\x6e\x22\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 8814, mode: os.FileMode(420), modTime: time.Unix(1582753886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
