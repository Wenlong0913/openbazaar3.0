// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdf\x73\xdb\xb8\x11\x7e\xd7\x5f\xb1\x0f\x77\x73\xed\x8c\x8e\x94\x64\x5b\xb2\xad\xaa\x33\xf2\x8f\x34\xbe\x38\xb6\x1a\xd9\x71\xce\x6f\x10\xb1\x12\x71\x02\x01\x06\x00\x25\x33\x9d\xe6\x6f\xef\x2c\x00\x52\xb2\xd3\xf4\xa1\x13\xcf\x25\x2f\x16\x09\xec\x2e\xf6\xfb\x76\xf7\x03\xc7\xf0\xeb\x0f\xfd\xd7\x19\xc3\x05\x73\x0c\x2c\x3a\x27\xd4\xca\x76\x7e\xb8\x83\xce\x18\xee\x72\x04\x2e\x0c\x66\x4e\x9b\x1a\x9c\x06\xeb\xb4\x41\xe0\xde\x71\x95\xe5\xc0\x2c\xb8\x1c\x41\x97\xa8\x16\xec\x0b\x63\xc6\xbf\x5b\x30\x8b\x5d\x10\xe5\xd2\x42\x81\x8e\xd1\xa3\x2e\x30\xc5\x3b\x63\x28\xab\x85\x14\x99\x5f\x95\x34\x0e\x70\xc9\x2a\xe9\x40\x58\xf8\x9a\x26\x7b\xa6\xb4\x82\xd9\xed\xfc\xea\x13\xdc\xce\xd1\x76\xe1\xa7\xeb\xdb\xf3\xe9\xf5\x74\x36\xbb\x98\xde\x4d\xd3\xdb\x12\xd5\x59\xbb\xee\x41\x28\xae\xb7\xb6\xdb\x19\xc3\xd7\xf4\x5a\x2c\x0c\x33\x75\x3a\x2d\x4b\x29\x32\xe6\x84\x56\x30\xaf\xca\x52\x1b\xf7\x62\xdb\x7b\x96\xc1\xed\xdc\xc7\x06\x3f\xe5\xba\xc0\xf4\x99\xfb\xce\x18\x66\x92\xa9\x93\x04\xe0\x52\x6d\x84\xd1\xaa\x40\xe5\x60\xc3\x8c\x60\x0b\x89\x16\x98\x41\xc0\xa7\x92\x29\x8e\x1c\xac\xa6\x5c\xd4\x50\xb0\x1a\x16\x08\x95\x45\x9e\x00\xdc\xdc\xde\x5d\x9e\x36\xf1\x75\xc6\x80\xdf\x35\xe4\xea\x52\x64\x4c\xca\x1a\x7e\xfe\x38\xfd\x70\x35\x3d\xbb\xbe\xfc\xb9\x0b\x8b\xca\x45\xb3\x95\x75\x64\x97\x65\x19\x5a\x8b\x1c\xb6\xc2\xe5\x9d\x31\xfc\xd4\x2c\x86\x1c\x0d\x26\x00\x53\x69\x75\x17\xbe\x52\x3e\xdb\xd8\x9c\x7e\x9e\xbe\xbd\x9c\x11\x0c\x04\x07\x17\x66\xf2\x2c\xff\x9d\xce\x8f\xe7\xd4\x18\x6e\xd0\x6d\xb5\x59\xbf\x2e\x6f\xef\x2d\x82\x43\xeb\x14\x3a\x3a\x5e\xfc\x73\xd2\xf7\xef\x94\xd8\xa0\xb1\x4c\xc2\x4c\x56\x2b\x0f\xfd\x4c\xb2\x1a\xfe\x72\x3f\x53\xb3\xbf\x02\xab\x9c\x2e\x98\x8b\x48\x50\x36\x02\xc5\xa5\xb0\x0e\x15\x10\x89\x40\x2f\x1c\x13\x8a\x42\xa7\x37\xf8\xe4\xd0\x28\x26\xe1\x6a\x06\x8c\x73\x83\xd6\xc2\xd2\xe8\x02\x6c\xe0\x1c\x72\xe0\xb8\x11\x19\xda\x04\xee\x72\x61\x41\x97\x9e\x92\x5c\xd8\x00\xbe\xf0\x41\x2a\x5d\x95\xaa\x0c\x31\xfe\xae\x2b\x4f\x23\x5b\x62\x26\x96\x35\x68\x85\xa0\x0d\x14\x54\x7c\x76\xcb\x4c\xd1\x38\x42\x4b\xd0\xc6\xd8\xb4\x82\xa5\x36\x20\x54\xa6\x0b\xa1\x56\xa0\x42\xaa\x3b\x63\xc8\xb4\x52\x98\x91\x57\x1f\x03\x5a\xdc\x33\x40\x44\x25\x62\x09\x05\x0c\x36\x4c\x0a\x0e\x45\x25\x9d\xa0\x15\x64\xb0\x60\x3e\x3e\xef\x97\x9e\x4d\x52\x51\x1e\xa6\xbd\xc4\xff\x4f\x5d\x56\xa6\x87\xbd\x5e\xff\xe5\x8a\x61\x7a\x7a\xfa\xdd\x97\xcf\xb7\x9f\xf4\x7a\x47\xa9\x2f\x8e\xff\x6e\xa1\x79\x1f\xfb\xc5\x8a\x39\xdc\xb2\xba\xcd\xb5\x0f\xb6\x94\xf8\x84\x16\x16\xda\xe5\x1e\x94\xab\xd9\x9b\x79\xbb\x72\x3a\xbb\xf2\x38\x3f\x6f\x55\x9d\xb1\x7f\xa1\x37\x68\xfc\x1b\xcb\x8a\x36\x2d\x3e\x4b\x7b\x1e\x6c\x1e\x33\xf4\xfd\xfc\x44\x67\xbb\x23\xf6\x07\x23\x7f\xc8\x7e\x93\x86\x01\x9d\xe0\x4c\x6b\x67\x1d\x2b\xf7\x00\xa0\xe2\xf7\x20\x38\x0d\x7f\x68\xa1\x7c\x34\x11\xbc\x04\x6e\x15\x58\xc7\x8c\x0b\x4f\x35\x47\xd8\x0a\x29\xa1\x60\x6b\xec\x8c\x41\x57\x6e\xa5\x09\xec\x3d\x88\xc9\x0e\x2d\x5e\x78\x57\x86\x95\x50\x22\x1a\xeb\x53\x50\x51\x65\xe4\x58\xd0\x1a\x2e\x6c\xe6\x4f\xaf\x5d\x8e\x94\x8e\xb0\xec\x45\x00\x9d\xf1\xce\xd0\xee\x70\x4f\x89\xff\xdf\x22\x9c\x96\x83\x32\xed\x0f\x2e\x0e\xde\x69\xfd\xf0\xee\xba\xf8\x78\xf1\x65\x68\xf9\x97\xf7\xf5\xa7\x7e\xfd\xcf\xf2\x92\x9f\xbf\x3d\x1b\x71\xf7\x54\x5f\x9a\x93\xfe\x76\xf6\xe6\x46\x9f\x7f\xba\xb4\x83\x7c\xbd\xf9\x3f\xcc\x5f\x2f\xee\xce\x36\x27\xa3\xeb\xe1\x1f\x1b\x76\xbd\xe6\xf3\x0f\xe5\xe7\xfc\xfc\xd3\xc1\x76\x34\xab\x67\x17\x0f\xf7\xa3\xf5\xf6\x37\xfb\xee\xb7\xfa\x8b\x9b\xde\xdf\xbc\x4e\x0f\x23\x14\xe6\xb1\x81\xc1\xaf\x9e\x2b\x4b\x2d\xa5\xde\x12\x12\xa1\xbc\x5f\x6f\x20\xab\xaa\x58\x10\x68\x4b\x30\x68\x4b\xad\x62\x13\xd8\x32\xe1\x7c\xfd\x6f\x73\x54\x44\x0f\x8a\xe5\x6a\x76\x33\x87\xcf\x15\x1a\xd1\x76\x1f\x61\x81\x81\x33\x8c\xa3\x5e\x2e\x29\xfb\xe8\xb6\x88\x01\x73\x96\x65\x95\x61\x59\x4d\xc6\xe9\x37\xed\xac\xdb\xd2\xb1\x25\x22\x27\x3e\x88\x52\xd9\xcf\x95\x36\x55\x31\xf1\x9c\xa6\x32\xba\xff\x70\x4d\x51\x10\xbf\x28\x08\x7c\xca\x72\xa6\x56\x08\x86\x39\x72\xfd\x9e\xa6\x57\xa6\x15\xd5\x4b\xc3\xcf\x33\xe1\x32\x2d\xd4\x74\x83\x86\xad\x70\xaf\x94\x9a\xcd\xb4\xb7\x34\x7a\x23\x38\x9a\x49\xee\x5c\x69\x4f\xd3\xd4\x89\x6c\x8d\x66\x6f\x4e\x25\xda\xac\x52\x56\x8a\x57\x81\x9a\x8e\xf6\xa7\x20\xdd\x8c\x80\xad\xb0\x39\x25\x0c\x15\x0d\x0b\x98\xcf\xaf\xa9\xcf\x53\xfa\x28\xb4\x5d\xd5\xef\xd0\xcd\xc5\x2a\x77\xb2\x06\x83\x99\x2e\x0a\xa4\xf9\x4f\x98\x2d\xa1\xd6\x95\xef\x35\xa6\x52\x8a\xc2\xf7\x98\xa2\xf1\x1d\x80\x7a\xbf\xc1\x42\x3b\x84\x82\x65\xb9\x50\x48\xda\x6e\xc9\x84\xac\x48\x9a\x04\x60\xc9\x39\x35\x9f\xce\x18\x18\xe5\x00\x98\xaa\x69\x34\x39\xdd\x04\x42\x7f\x12\x5d\x32\xad\x9c\xd1\x92\x5c\x1a\xdf\xb4\xba\x34\x96\x64\xc5\xc9\x2f\x37\x4c\xb4\x01\x6c\x99\x94\x61\x4a\x5b\x2b\xc3\xf4\xbb\xdb\x79\xa3\x90\x7d\xbb\x53\x18\xfa\x23\x93\x56\xb7\x63\x91\xf6\x97\xcc\xe5\x9e\xff\x6d\xeb\xcf\xd0\x38\x1f\xc4\x1a\x6b\x58\x0a\x89\x04\x10\x71\xd2\x07\x43\x6f\xc5\x92\x64\x21\x46\xa7\xf4\x84\x96\x4d\x52\xb2\x95\x3a\x9d\x5a\x2b\x13\x7a\x1a\xde\xaf\xb1\xfe\xf6\xf5\x1a\xeb\xa6\x1e\x77\x7c\xf0\x2a\x8e\x1a\x2f\xb3\x22\x23\x25\x91\x43\x66\x90\xa3\x72\x82\x49\xeb\x63\x68\x80\x8b\x70\x34\xe8\x56\x96\x9a\x39\xed\xa0\xc5\x41\xb3\x26\x70\x43\x70\xb8\x9c\x39\xbf\xd6\x0b\x40\x4a\x8c\x3f\x29\x65\x67\x7a\x73\xf1\x62\x0f\xd9\x2a\x8d\x76\x98\x51\xf0\x2d\xa4\x01\xe5\x04\xae\xdc\x2f\x36\xa4\x90\x48\xb2\xcf\x91\x9d\x1b\xf2\xf0\xc2\x28\x6e\x90\xb4\xb0\x56\x20\x75\xc6\x64\xae\xad\x0b\x8e\xe8\x85\x0b\xe3\x83\xdc\xae\x0c\x2b\xa2\xf6\x09\x2a\xb5\x01\x79\x3a\xbb\xf2\x6a\x9f\xad\x69\x84\x35\x87\x6a\x72\x51\x32\x6b\xb7\xda\x90\x08\x21\x52\x35\x42\x97\x5e\xe7\xf8\x04\xa8\x32\x4d\x1a\x76\xfe\x76\x3a\x38\x1a\x42\xce\x6c\x0e\x7a\x19\xc5\x17\xcb\x5c\xc5\x64\x6b\x62\x57\x05\x3c\x12\x33\x66\x23\x72\x25\x3a\xda\xe6\x42\x22\x08\x07\x56\x38\xeb\x75\x33\x55\x48\x28\x2b\x6a\x52\x62\xe5\x89\x93\xc0\x03\xf5\x52\x9f\x7c\x0a\x9d\x29\x1f\xaf\xc1\xcf\x15\x5a\xb7\x23\x27\xd9\x6d\xb6\x57\xea\x57\x8a\xd0\xd7\x5c\xeb\xaf\xe9\xa0\x3e\x76\xbf\x65\x41\x8e\x8a\x92\x99\x40\xeb\xf6\xa5\x65\x1b\xe4\x41\xc9\x77\xc6\xac\x14\x95\x25\x6d\x59\xe0\x84\x49\x91\xa1\x7f\xd4\x58\x9d\x1c\xe1\xf1\xf1\xe1\xf1\xc9\x31\x67\x83\xe3\xde\xe1\xa8\x7f\xd4\xe7\x3d\x3c\x1a\x2e\x8f\x79\x36\x1c\x9c\x0c\x46\xa3\x83\x61\xef\x80\xf7\xf8\x90\xb1\xc5\x82\xf3\xe1\x80\xf5\xfb\xb8\x1c\x0d\xfa\xbc\x7f\x74\x38\xe0\xc7\xbe\x75\x93\x2c\x00\x26\xbd\x84\x75\x62\xe3\x73\xb6\xc7\x5f\x3a\x63\xc6\x94\x67\x45\xa6\xf5\x5a\x78\x76\x23\xff\x86\xab\x77\x39\xe5\xb0\x34\xa2\x60\xa6\x0e\xcb\x59\x9c\x05\x2e\x42\x42\x7f\xb7\x2c\xf1\x0c\x88\xbf\x5a\xb9\xbd\x13\x3a\x81\xb1\x04\xf2\x73\x08\x89\x49\xf0\x80\xc0\x35\x11\x69\x8f\xbf\x81\x08\x64\x23\x74\xeb\xe0\x75\xc3\x64\x85\x01\x1a\x61\x23\xb4\x34\xf3\x2a\x47\x83\xc9\xd3\x96\x05\x9a\x0a\x17\x96\x19\x5d\xad\x62\x1f\xd1\x45\x41\xc0\x49\x6a\x86\xb1\xd5\x87\x0b\x6f\x38\x0e\xf9\x6f\xa1\x0e\xad\xac\x7e\x59\xfe\x2d\x03\x84\x0d\x78\x86\x1c\x4e\x7e\xff\x74\xb3\x7e\x2c\xde\x7c\x79\xfc\xc7\x9b\xe2\xf1\xed\x4d\xfe\xf8\xf6\xa6\xd8\x3d\x7b\xcc\xb3\xc1\x87\xe2\xb1\x78\xb3\x7e\x5c\x4d\x26\xb1\x25\x6e\x73\xe1\x90\x94\x7e\x6c\x7f\x22\xdb\xbb\x70\xd0\xfd\xb8\x0c\x37\xc5\xa2\x65\x0f\xb5\x25\xe4\xa2\x9c\x0c\x8e\x93\xc3\xa3\x64\x38\x4a\xfa\xa3\xa3\xfd\xe7\x07\x83\x64\x70\x70\x92\xf4\x7b\x27\x49\xff\xa8\xdf\xe9\x9c\xc2\xf9\xed\x87\xb9\xbf\x38\xfa\x69\xc3\x61\x51\x37\xd7\xf3\x84\x62\x88\x57\x16\xca\xb1\x3f\xe9\xae\xf5\x39\x0d\x4b\x26\x2d\x36\xa7\x34\x76\xd2\xa3\xc0\xaf\x9e\xf7\xb9\x30\x36\x7c\x06\xbd\x94\x25\xb2\x45\xf1\xcb\x48\x97\xc4\xcf\x03\x34\xeb\x1b\x41\xdd\x8d\x9a\x55\x50\x1b\x8f\x57\x27\x82\x45\xb8\x50\x49\x4d\x4c\xa1\xe3\x44\x27\xbe\x4e\x51\xf1\x52\x0b\xe5\x2c\xe5\x2e\xcb\x9b\x15\xfe\x22\xc5\xc5\xb2\xee\x8c\x1b\x49\xfd\x0b\x95\x6f\xbc\xc5\x59\xc7\x1c\x7a\x0f\xde\xbc\x56\xb2\x8e\x61\x2f\xd1\xd1\x64\x5c\x85\xef\x1f\xc4\xe6\xd0\xf9\xa2\x52\xf6\x96\x08\xe6\x70\x88\x18\x7e\x18\x69\x3f\x58\x1f\x8c\xe1\xc1\x8f\xcd\x3f\x49\x84\xde\x5e\xdc\xbe\xca\xa1\x2e\x70\x51\xad\x5e\x25\x64\x6f\x19\xa4\x5e\xad\x28\x39\x12\x37\x28\x69\x20\x7d\xf4\xb7\x39\xff\x33\x5c\xc3\xfe\xc5\x69\x21\x89\x95\xa5\xee\x52\x85\x8b\x0c\xbb\xb0\x65\x86\xf4\x4a\x17\xd0\x18\x6d\xba\x90\x19\xe1\x3b\xd6\xbf\x3b\x63\xb2\xe9\xf7\x4f\x68\xcb\xff\xf8\x66\x26\xf5\xaa\x15\x23\x52\xaf\xbe\xf9\xda\x92\x4a\xbd\x6a\xaf\xb8\xfe\x2b\x43\x73\x25\x8c\xb7\x7b\xe2\xdb\xdb\xbb\xbb\x19\xb5\x43\x32\xd4\x8c\x21\x9b\x40\xd8\x13\x1f\x47\x45\x17\x75\xda\x02\x9b\x02\xe1\xa4\x39\xdc\xde\xf7\x87\xd8\xc2\x62\x37\xf1\x1f\xab\xf6\xed\x08\x15\x04\x39\x2d\xa5\x09\xb0\xf0\x0a\xa5\xf9\xf8\xc4\x9c\x2f\xd2\xd3\x34\x6d\x25\xc1\xe9\xdf\xe2\x56\x8a\xfe\xef\xa9\xcf\x64\x5a\xd2\x33\xd0\x2a\x6b\x65\x67\xe2\xc7\x84\x5f\x38\x19\xf6\x86\xbe\x3c\x1e\x8c\x70\x08\xe7\xb3\xfb\xd6\x7b\x9c\x89\x6d\x70\x61\x1e\x77\xc6\x90\x95\x55\xb3\x3b\x75\x45\xb9\xf7\xc1\x2e\xa1\xe7\xff\x09\x00\x00\xff\xff\xc5\x3e\x16\xff\x67\x15\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 5479, mode: os.FileMode(436), modTime: time.Unix(1573333740, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

