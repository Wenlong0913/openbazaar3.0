// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x73\xdb\xba\x11\x7e\xd7\xaf\xd8\x87\x73\xe6\xb4\x33\x0a\x69\x29\xbe\xab\xea\x8c\x7c\x49\xed\x39\x8e\xad\xc6\x4e\x9c\xe3\x37\x08\x58\x8a\xa8\x41\x80\x01\x40\xc9\x4c\xa7\xf9\xed\x9d\x05\x40\x4a\x76\x9a\x3e\xc5\x73\x92\x17\x0b\x97\xdd\xc5\x7e\x1f\x76\x3f\x70\x02\x6f\x7e\xea\xbf\xc1\x04\xce\x98\x67\xe0\xd0\x7b\xa9\x97\x6e\xf0\xd3\x1d\x0c\x26\x70\x57\x22\x08\x69\x91\x7b\x63\x5b\xf0\x06\x9c\x37\x16\x41\x04\xc7\x0d\x2f\x81\x39\xf0\x25\x82\xa9\x51\x2f\xd8\x57\xc6\x6c\x98\x5b\x30\x87\x43\x90\x75\xe1\xa0\x42\xcf\x68\x68\x08\x4c\x8b\xc1\x04\xea\x66\xa1\x24\x0f\xab\xb2\xce\x01\x16\xac\x51\x1e\xa4\x83\x6f\x79\xb6\x65\xca\x68\x98\xdf\xdc\x5e\x7e\x86\x9b\x5b\x74\x43\xf8\xe5\xea\xe6\x74\x76\x35\x9b\xcf\xcf\x66\x77\xb3\xfc\xa6\x46\x7d\xd2\xaf\xbb\x97\x5a\x98\xb5\x1b\x0e\x26\xf0\x2d\xbf\x92\x0b\xcb\x6c\x9b\xcf\xea\x5a\x49\xce\xbc\x34\x1a\x6e\x9b\xba\x36\xd6\xbf\xd8\xf6\x9e\x71\xb8\xb9\x0d\xb1\xc1\x2f\xa5\xa9\x30\x7f\xe6\x7e\x30\x81\xb9\x62\xfa\x28\x03\x38\xd7\x2b\x69\x8d\xae\x50\x7b\x58\x31\x2b\xd9\x42\xa1\x03\x66\x11\xf0\xa9\x66\x5a\xa0\x00\x67\x28\x17\x2d\x54\xac\x85\x05\x42\xe3\x50\x64\x00\xd7\x37\x77\xe7\xc7\x5d\x7c\x83\x09\xe0\x0f\x0d\xf9\xb6\x96\x9c\x29\xd5\xc2\xaf\x9f\x66\x1f\x2e\x67\x27\x57\xe7\xbf\x0e\x61\xd1\xf8\x64\xb6\x71\x9e\xec\x32\xce\xd1\x39\x14\xb0\x96\xbe\x1c\x4c\xe0\x97\x6e\x31\x94\x68\x31\x03\x98\x29\x67\x86\xf0\x8d\xf2\xd9\xc7\xe6\xcd\xf3\xf4\x6d\xe5\x8c\x60\x20\x38\x84\xb4\xd3\x67\xf9\x1f\x0c\x7e\x3e\xa7\x26\x70\x8d\x7e\x6d\xec\xe3\xeb\xf2\xf6\xa3\x43\xf0\xe8\xbc\x46\x4f\xc7\x4b\x7f\x4e\x47\x61\x4e\xcb\x15\x5a\xc7\x14\xcc\x55\xb3\x0c\xd0\xcf\x15\x6b\xe1\x2f\x1f\xe7\x7a\xfe\x57\x60\x8d\x37\x15\xf3\x09\x09\xca\x46\xa4\xb8\x92\xce\xa3\x06\x22\x11\x98\x85\x67\x52\x53\xe8\x34\x83\x4f\x1e\xad\x66\x0a\x2e\xe7\xc0\x84\xb0\xe8\x1c\x14\xd6\x54\xe0\x22\xe7\x50\x80\xc0\x95\xe4\xe8\x32\xb8\x2b\xa5\x03\x53\x07\x4a\x0a\xe9\x22\xf8\x32\x04\xa9\x4d\x53\xeb\x3a\xc6\xf8\x87\x69\x02\x8d\x5c\x8d\x5c\x16\x2d\x18\x8d\x60\x2c\x54\x74\xf9\xdc\x9a\xd9\xaa\x73\x84\x8e\xa0\x4d\xb1\x19\x0d\x85\xb1\x20\x35\x37\x95\xd4\x4b\xd0\x31\xd5\x83\x09\x70\xa3\x35\x72\xf2\x1a\x62\x40\x87\x5b\x06\x88\xa8\x44\x2c\xa9\x81\xc1\x8a\x29\x29\xa0\x6a\x94\x97\xb4\x82\x0c\x56\x2c\xc4\x17\xfc\xd2\xd8\x34\x97\xf5\x6e\xbe\x93\x85\xff\xb9\xe7\x75\xbe\xbb\xb3\x33\x7a\xb9\x62\x3f\x3f\x3e\xfe\xe1\xe4\xf3\xed\x47\x3b\x3b\x7b\x79\xb8\x1c\xff\xdb\x42\x37\x9f\xea\xc5\x92\x79\x5c\xb3\xb6\xcf\x75\x08\xb6\x56\xf8\x84\x0e\x16\xc6\x97\x01\x94\xcb\xf9\xbb\xdb\x7e\xe5\x6c\x7e\x19\x70\x7e\x5e\xaa\x06\x93\x30\x61\x56\x68\xc3\x8c\x63\x55\x9f\x96\x90\xa5\x2d\x0f\xae\x4c\x19\xfa\x71\x7e\x92\xb3\xcd\x11\x47\xe3\x83\x70\xc8\x51\x97\x86\x31\x9d\xe0\xc4\x18\xef\x3c\xab\xb7\x00\xa0\xcb\x1f\x40\xf0\x06\xfe\x65\xa4\x0e\xd1\x24\xf0\x32\xb8\xd1\xe0\x3c\xb3\x3e\x8e\x1a\x81\xb0\x96\x4a\x41\xc5\x1e\x71\x30\x01\xd3\xf8\xa5\x21\xb0\xb7\x20\x26\x3b\xb4\x78\x11\x5c\x59\x56\x43\x8d\x68\x5d\x48\x41\x43\x37\xa3\xc4\x8a\xd6\x08\xe9\x78\x38\xbd\xf1\x25\x52\x3a\xe2\xb2\x17\x01\x0c\x26\x1b\x43\x9b\xc3\x3d\x65\xe1\x7f\x8f\x70\x5e\x8f\xeb\x7c\x34\x3e\x7b\xfb\xbb\x31\xf7\xbf\x5f\x55\x9f\xce\xbe\xee\x3b\xf1\xf5\x7d\xfb\x79\xd4\xfe\xb3\x3e\x17\xa7\x17\x27\x07\xc2\x3f\xb5\xe7\xf6\x68\xb4\x9e\xbf\xbb\x36\xa7\x9f\xcf\xdd\xb8\x7c\x5c\xbd\x4e\x91\xa1\x34\xdd\xa6\x0a\x03\x6f\x02\x98\x85\x51\xca\xac\x29\x55\xf1\xfe\xbd\x5e\xc7\xd4\x4d\xb5\xa0\xac\x16\x60\xd1\xd5\x46\xa7\x5b\xba\x66\xd2\x87\x0b\xba\x2e\x51\x13\x7e\x14\xcb\xe5\xfc\xfa\x16\xbe\x34\x68\x65\x5f\x1e\xa4\x03\x06\xde\x32\x81\xa6\x28\x28\xfb\xe8\xd7\x88\x11\x14\xc6\x79\x63\x19\x6f\xc9\x38\xfd\xa6\x9d\x6d\xcf\x6d\x57\x23\x0a\x02\x4c\xd6\xda\x7d\x69\x8c\x6d\xaa\x69\x20\x1d\xf1\xfc\xe3\x87\x2b\x8a\x82\x08\x40\x41\xe0\x13\x2f\x99\x5e\x22\x58\xe6\xc9\xf5\x7b\x6a\x2f\xdc\x68\x22\x74\x47\xa0\x13\xe9\xb9\x91\x7a\xb6\x42\xcb\x96\xb8\xc5\xf5\x6e\x33\xed\xad\xad\x59\x49\x81\x76\x5a\x7a\x5f\xbb\xe3\x3c\xf7\x92\x3f\xa2\xdd\x6a\x24\x99\xb1\xcb\x9c\xd5\x92\x22\x39\x8b\x45\x0f\x98\x52\xb0\xd5\x8b\x2d\x2a\x46\x85\xb2\x68\x74\xe0\x30\x53\xd2\xb7\xe4\x06\x6b\xbf\xb9\xcf\x81\xfd\x74\xd8\xf8\x2b\x12\x54\xea\x65\x3c\x72\xe1\x8c\x56\x6d\x2c\xa0\x3f\x19\xd8\x98\xc1\x3f\x85\x50\x5d\x2b\x58\x4b\x57\x12\x2e\xa8\x43\xfe\x6e\x6f\xaf\xa8\xde\x53\x6a\x28\xb4\xcd\xed\xdf\x90\xa8\x94\xcb\xd2\xab\x16\x2c\x72\x53\x55\x48\x3a\x80\xf2\x54\x40\x6b\x9a\x50\x73\x6c\xa3\x35\x85\x1f\xa8\x83\x36\x54\x02\xea\x01\x16\x2b\xe3\x11\x2a\xc6\x4b\xa9\x91\x34\x5e\xc1\xa4\x6a\x48\xa2\x44\xfe\x90\x73\x2a\x42\x83\x09\xe1\x68\xd6\xc0\x74\x4b\x2d\xca\x9b\x2e\x10\xfa\x93\x80\xe2\x46\x7b\x6b\x14\xb9\xb4\x01\xbe\x21\xb5\x27\xd5\x08\xf2\x2b\x2c\x93\x7d\x00\x6b\xa6\x54\xec\xd6\xce\xa9\x08\xe2\xdd\xc6\x1b\x85\x1c\xca\x9e\xc6\x58\x27\x99\x72\xa6\x6f\x8f\xb4\xbf\x66\xbe\x0c\xd7\xac\x6f\x01\x1c\xad\x0f\x41\x3c\x62\x0b\x85\x54\x48\x00\x11\xf5\x43\x30\x34\x2b\x0b\x92\x87\x98\x9c\xd2\x08\x2d\x9b\xe6\x64\x2b\xf7\x26\x77\x4e\x65\x34\x1a\xe7\x1f\xb1\xfd\x7e\xfa\x11\xdb\xee\xda\x6f\xf8\x10\xd4\x1c\x15\x60\xe6\x24\x27\x45\x51\x02\xb7\x28\x50\x7b\xc9\x94\x0b\x31\x74\xc0\x25\x38\x3a\x74\x1b\x47\x45\x9d\x76\xd0\xe2\xa8\x5d\x33\xb8\x26\x38\x7c\xc9\x7c\x58\x1b\x84\x20\x25\x26\x9c\x94\xb2\x33\xbb\x3e\x7b\xb1\x87\x6c\xd5\xd6\x78\xe4\x14\x7c\x0f\x69\x44\x39\x83\x4b\xff\x9b\x8b\x29\x24\x92\x6c\x73\x64\xe3\x86\x3c\xbc\x30\x8a\x2b\x24\x4d\x6c\x34\x28\xc3\x99\x2a\x8d\xf3\xd1\x11\x4d\xf8\xd8\x46\xc8\xed\xd2\xb2\x2a\x69\xa0\xa8\x56\x3b\x90\x67\xf3\xcb\xa0\xfa\xd9\x23\xb5\xb2\xee\x50\x5d\x2e\x6a\xe6\xdc\xda\x58\x12\x23\x44\xaa\x4e\xf0\xd2\x74\x89\x4f\x80\x9a\x1b\xd2\xb2\xb7\x17\xb3\xf1\xde\x3e\x94\xcc\x95\x60\x8a\x24\xc2\x18\xf7\x0d\x53\xbd\x89\xcd\x2d\x10\x89\x98\x29\x1b\x89\x2b\xc9\xd1\xba\x94\x0a\x41\x7a\x70\xd2\xbb\xa0\x9f\xe9\x86\xc4\x6b\x45\xb5\x50\x2e\x03\x71\x32\xb8\xa7\x92\x1d\x92\x4f\xa1\x33\x1d\xe2\xb5\xf8\xa5\x41\xe7\x37\xe4\x24\xbb\xdd\xf6\x46\xbf\xa1\x08\xc3\x9d\xeb\xfd\x75\x85\x3a\xc4\x1e\xb6\x2c\xc8\x51\x55\x33\x1b\x69\xdd\x4f\x3a\xb6\x42\x11\x15\xfd\x60\xc2\x6a\xd9\x38\xd2\x98\x15\x4e\x99\x92\x1c\xc3\x50\x67\x75\xba\x87\x87\x87\xbb\x87\x47\x87\x82\x8d\x0f\x77\x76\x0f\x46\x7b\x23\xb1\x83\x7b\xfb\xc5\xa1\xe0\xfb\xe3\xa3\xf1\xc1\xc1\xdb\xfd\x9d\xb7\x62\x47\xec\x33\xb6\x58\x08\xb1\x3f\x66\xa3\x11\x16\x07\xe3\x91\x18\xed\xed\x8e\xc5\x61\xe8\x10\x24\x0f\x80\xa9\x20\x65\xbd\x5c\x85\x9c\x6d\xf1\x97\xce\xc8\x99\x0e\xac\xe0\xc6\x3c\xca\xc0\x6e\x14\xdf\x71\xf5\xae\xa4\x1c\xd6\x56\x56\xcc\xb6\x71\x39\x4b\x2d\xc7\x27\x48\xe8\xef\x9e\x25\x81\x01\xe9\x57\x2f\xbb\x37\x82\x27\x32\x96\x40\x7e\x0e\x21\x31\x09\xee\x11\x84\x21\x22\x6d\xf1\x37\x12\x81\x6c\xc4\x6a\x1d\xbd\xae\x98\x6a\x30\x42\x23\x5d\x82\x96\x5a\x6b\xe3\xa9\xff\x05\xda\xb2\x48\x53\xe9\xe3\x32\x6b\x9a\x65\xaa\x23\xa6\xaa\x08\x38\x45\xc5\x30\x95\xfa\xf8\xf0\x8d\xc7\x21\xff\x3d\xd4\xb1\x94\xb5\x2f\xaf\x7f\xcf\x00\xe9\x22\x9e\x31\x87\xd3\x3f\x3e\x5f\x3f\x3e\x54\xef\xbe\x3e\xfc\xe3\x5d\xf5\x70\x71\x5d\x3e\x5c\x5c\x57\x9b\xb1\x87\x92\x8f\x3f\x54\x0f\xd5\xbb\xc7\x87\xe5\x74\x9a\x4a\xe2\xba\x94\x1e\x49\xf1\xa7\xf2\x27\xf9\xd6\xc3\x83\xde\xc9\x75\x7c\x31\x56\x3d\x7b\xa8\x2c\xa1\x90\xf5\x74\x7c\x98\xed\xee\x65\xfb\x07\xd9\xe8\x60\x6f\x7b\xfc\xed\x38\x1b\xbf\x3d\xca\x46\x3b\x47\xd9\x68\x2f\x94\xde\xd3\x9b\x0f\xb7\xe1\x01\x19\xba\x8d\x80\x45\xdb\x3d\xd3\x33\x8a\x21\x3d\x5d\x28\xc7\xe1\xa4\x9b\xd2\xe7\x0d\x14\x4c\x39\xf2\xab\x0d\x37\xd6\xc5\x52\x7e\xf9\xbc\xcc\xc5\xae\x11\x12\x18\x7a\x3a\x71\x2d\x69\x60\x46\xea\x27\x7d\x25\x20\x45\xd1\xe9\xea\x61\x92\xae\x92\xaa\x78\x7a\x41\x11\x2a\xd2\xc7\x8b\xd4\x85\x14\x0b\x4e\x72\x12\xae\x29\x6a\x51\x1b\xa9\xbd\xa3\xd4\xf1\xb2\x5b\x11\xde\x53\x42\x16\xed\x60\xd2\x29\xeb\xdf\xe8\xf6\xa6\xc7\x9c\xf3\xcc\x47\xb1\x11\xcc\x93\xb4\x48\x61\x17\xe8\xa9\x31\x2e\xe3\x67\x10\x22\x73\x2c\x7c\x49\x8f\x04\x4b\x84\x72\x3c\x44\x0a\xff\x95\x64\xc9\x7d\xe8\x9a\x7f\x8e\x32\x39\x8f\x4a\xe4\x39\xfe\xb1\x8d\xc7\x3b\x4e\x80\x49\xbd\x25\xf3\xc2\x63\x86\xe9\xb6\x03\x4b\x74\xcb\x07\x93\xbe\x1a\x52\xa7\xa2\xd2\x17\xba\x47\x92\xbc\x58\x93\x36\xe4\x8d\xb5\xa8\xb9\x44\x47\x1d\x08\x19\x2f\xc3\xc3\x37\xe8\xbf\xc4\xd3\x68\x6e\x7a\x72\x7a\x31\x98\xbc\x18\xba\x3b\x7d\x39\x74\xf5\xfd\xd0\xc3\xf9\x77\x43\xe7\x77\x17\xaf\x82\xdc\x19\x2e\x9a\xe5\xab\xe0\x12\x2c\x83\x32\xcb\x25\x01\xa2\x70\x85\x8a\x9a\xee\xa7\xf0\x72\x0d\x3f\xe3\x93\xf3\xdf\x82\x16\x92\x20\x2b\xcc\x90\xaa\x98\xe4\x38\x84\x35\xb3\xa4\xc9\x86\x80\xd6\x1a\x3b\x04\x6e\x65\xa8\xca\xff\x19\x4c\xc8\x66\xd8\x3f\xa5\x2d\xff\xe7\xfb\xa0\x32\xcb\x5e\x70\x29\xb3\xfc\xee\xcb\x52\xae\xcc\xb2\x7f\xce\x87\x2f\x2a\xdd\xf3\x37\x7d\xc9\x20\xf6\x5c\xdc\xdd\xcd\xa9\xe4\x93\xa1\xae\xd5\xba\x0c\xe2\x9e\x34\x9c\x54\x6b\xd2\xa2\x0b\xdc\x10\x4b\x16\xb1\xbc\xa4\x4a\x91\xca\x74\xaa\x98\xe1\xc3\xdc\xb6\x1d\xa9\xe3\xdb\x86\x96\x52\x97\x5b\x04\x15\xd6\x7d\x68\x63\x3e\x54\xa2\xe3\x3c\xef\x65\xcf\xf1\xdf\xd2\x56\x8a\xfe\xef\x79\xc8\x64\x5e\xd3\x18\x18\xcd\x7b\x69\x9d\x85\x56\x18\x16\x4e\xf7\x77\xf6\x43\x0d\xb8\xb7\xd2\x23\x9c\xce\x3f\xf6\xde\x53\xdf\xef\x83\x8b\x9a\x63\x30\x01\x5e\x37\xdd\xee\xdc\x57\xf5\xd6\xc7\xc9\x8c\xc6\xff\x1b\x00\x00\xff\xff\x38\x95\x26\x54\x53\x16\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 5715, mode: os.FileMode(436), modTime: time.Unix(1575135017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
