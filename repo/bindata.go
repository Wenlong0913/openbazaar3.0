// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x7a\x5d\x73\xdb\xb8\x92\xf6\xbd\x7e\x45\x5f\xcc\xa9\xf3\xbe\x55\x0a\x65\x39\xb1\xf3\xa1\xd5\x56\x29\xb1\x33\x71\x25\x63\xab\x2c\x67\x32\xc7\x77\x10\xd9\x14\xb1\x06\x01\x0e\x00\x4a\xd6\xd9\xda\xf9\xed\x5b\xdd\x00\x48\x4a\x71\x66\x4f\x6d\x25\x35\x9b\x5c\x24\x22\xf1\xd1\xe8\x7e\xba\xfb\xe9\x06\x67\xf0\xec\xbb\xfe\x19\xcd\xe0\x42\x78\x01\x0e\xbd\x97\x7a\xe3\x46\xdf\x7d\x83\xd1\x0c\xee\x2a\x84\x42\x5a\xcc\xbd\xb1\x7b\xf0\x06\x9c\x37\x16\xa1\xe0\x8d\xdb\xbc\x02\xe1\xc0\x57\x08\xa6\x41\xbd\x16\xff\x14\xc2\xf2\xbb\xb5\x70\x38\x06\xd9\x94\x0e\x6a\xf4\x82\x1e\x8d\x41\xe8\x62\x34\x83\xa6\x5d\x2b\x99\xf3\xa8\x2c\x6d\x80\xa5\x68\x95\x07\xe9\xe0\x8f\x49\x36\x58\xca\x68\x58\xde\xac\xae\x7e\x83\x9b\x15\xba\x31\xfc\xf4\xe9\xe6\xdd\xe2\xd3\x62\xb9\xbc\x58\xdc\x2d\x26\x37\x0d\xea\xb7\xdd\xb8\x2f\x52\x17\x66\xe7\xc6\xa3\x19\xfc\x31\xf9\x24\xd7\x56\xd8\xfd\x64\xd1\x34\x4a\xe6\xc2\x4b\xa3\x61\xd5\x36\x8d\xb1\xfe\x68\xda\x2f\x22\x87\x9b\x15\xcb\x06\x3f\x55\xa6\xc6\xc9\xc1\xf6\xa3\x19\x2c\x95\xd0\xaf\x33\x80\x4b\xbd\x95\xd6\xe8\x1a\xb5\x87\xad\xb0\x52\xac\x15\x3a\x10\x16\x01\x1f\x1b\xa1\x0b\x2c\xc0\x19\xd2\xc5\x1e\x6a\xb1\x87\x35\x42\xeb\xb0\xc8\x00\xae\x6f\xee\x2e\xdf\x24\xf9\x46\x33\xc0\x6f\x2e\xe4\xf7\x8d\xcc\x85\x52\x7b\xf8\xdb\xaf\x8b\xdb\xab\xc5\xdb\x4f\x97\x7f\x1b\xc3\xba\xf5\x71\xd9\xd6\x79\x5a\x57\xe4\x39\x3a\x87\x05\xec\xa4\xaf\x46\x33\xf8\x29\x0d\x86\x0a\x2d\x66\x00\x0b\xe5\xcc\x18\xfe\x20\x7d\x76\xb2\x79\x73\xa8\xbe\x81\xce\xc8\x0c\x64\x8e\x42\xda\xf9\x81\xfe\x47\xa3\xef\x8f\xa9\x19\x5c\xa3\xdf\x19\xfb\xf0\x63\x71\xfb\xd9\x21\x78\x74\x5e\xa3\xa7\xe3\xc5\xff\xce\xa7\xfc\x4e\xcb\x2d\x5a\x27\x14\x2c\x55\xbb\x61\xd3\x2f\x95\xd8\xc3\xff\xfb\xbc\xd4\xcb\xff\x0f\xa2\xf5\xa6\x16\x3e\x5a\x82\xb4\x11\x20\xae\xa4\xf3\xa8\x81\x40\x04\x66\xed\x85\xd4\x24\x3a\xbd\xc1\x47\x8f\x56\x0b\x05\x57\x4b\x10\x45\x61\xd1\x39\x28\xad\xa9\xc1\x05\xcc\x61\x01\x05\x6e\x65\x8e\x2e\x83\xbb\x4a\x3a\x30\x0d\x43\xb2\x90\x2e\x18\x5f\xb2\x90\xda\xb4\x8d\x6e\x82\x8c\xff\x30\x2d\xc3\xc8\x35\x98\xcb\x72\x0f\x46\x23\x18\x0b\x35\x39\x9f\xdb\x09\x5b\xa7\x8d\xd0\x91\x69\xa3\x6c\x46\x43\x69\x2c\x48\x9d\x9b\x5a\xea\x0d\xe8\xa0\xea\xd1\x0c\x72\xa3\x35\xe6\xb4\x2b\xcb\x80\x0e\x07\x0b\x10\x50\x09\x58\x52\x83\x80\xad\x50\xb2\x80\xba\x55\x5e\xd2\x08\x5a\xb0\x16\x2c\x1f\xef\x4b\xcf\xe6\x13\xd9\xbc\x98\x9c\x64\xfc\x77\xe2\xf3\x66\xf2\xe2\xe4\x64\x7a\x3c\xe2\x7c\xf2\xe6\xcd\x37\x5f\x1e\x4e\x7f\x7d\x72\x72\x36\x61\xe7\x78\x7a\x85\xf4\x3e\xc6\x8b\x8d\xf0\xb8\x13\xfb\x4e\xd7\x2c\x6c\xa3\xf0\x11\x1d\xac\x8d\xaf\xd8\x28\x57\xcb\xf7\xab\x6e\xe4\x62\x79\xc5\x76\x3e\x0c\x55\xa3\x19\xbf\x30\x5b\xb4\xfc\xc6\x89\xba\x53\x0b\x6b\x69\xb0\x83\xab\xa2\x86\xbe\xad\x9f\xb8\x59\x7f\xc4\xe9\xe9\x4b\x3e\xe4\x34\xa9\xe1\x94\x4e\xf0\xd6\x18\xef\xbc\x68\x06\x06\x20\xe7\x67\x23\x78\x03\xff\x61\xa4\x66\x69\xa2\xf1\x32\xb8\xd1\xe0\xbc\xb0\x3e\x3c\x35\x05\xc2\x4e\x2a\x05\xb5\x78\xc0\xd1\x0c\x4c\xeb\x37\x86\x8c\x3d\x30\x31\xad\x43\x83\xd7\xbc\x95\x15\x0d\x34\x88\xd6\xb1\x0a\x5a\xf2\x8c\x0a\x6b\x1a\x53\x48\x97\xf3\xe9\x8d\xaf\x90\xd4\x11\x86\x1d\x09\x30\x9a\xf5\x0b\xf5\x87\x7b\xcc\xf8\x6f\x67\xe1\x49\x73\xda\x4c\xa6\xa7\x17\xcf\x3f\x1a\xf3\xe5\xed\xe5\x2a\x3f\xf5\x2b\xbd\xfd\xf5\x16\xeb\x8f\xce\x5d\xfc\x22\x3f\x7e\xba\xc7\x8f\xe5\xe7\xdb\x6a\xf7\x9b\xd8\xdd\x7f\x11\xd2\xfc\xee\x96\xcf\xb7\xd3\x1d\xe9\x64\xc5\x59\x85\xc4\x2b\x8d\xdd\x09\x5b\x80\x43\xbb\x65\x91\x07\xaa\xb1\x98\xa3\xdc\x22\xd4\xe8\x9c\xd8\xa0\x83\x5d\x45\xa0\x2f\x4b\x25\x35\x66\xb0\x44\xb4\x57\x17\x8c\x22\xf6\x1a\x89\x05\x47\xc4\xa0\xae\x35\x52\xc4\x49\x67\x6b\xac\x29\xa5\x0a\x5b\xf2\xe1\x59\xb1\x2e\x0c\x0d\x39\x2e\xed\x32\x9a\x71\xa0\x0d\x4a\x93\x65\x88\xc5\xb9\xd0\xda\xf8\xa4\xf3\xa0\x6f\xe9\x78\x91\xe4\x5f\xc3\x13\x78\x12\xf4\xf7\x16\xed\x9e\x1c\x7e\x34\xeb\xc0\xd8\x9b\xb3\x30\x3b\xad\x8c\x28\xfa\xd3\x71\x08\xa1\x5d\xb3\xd1\xcc\xe9\x32\xac\x37\xff\xdf\xaa\xf8\x3b\xc7\xd8\x19\xdc\x19\xfb\x63\x63\xf8\xfc\xbb\xfe\x19\xc1\xb7\xfe\x7c\x59\xdc\x5e\x5f\x5d\xff\x0c\xcf\x9e\xc1\xc5\xe2\xfa\xe7\xcb\x5b\xb8\xbf\xb9\xbe\xa4\x9f\xf1\xcd\x68\x06\x03\xd6\xd0\x72\xcc\x4d\xe1\x82\x3c\x06\xae\x2e\x38\xee\x0a\xc2\x0e\x3a\x17\xa2\xec\x55\x09\x7b\xd3\x1e\x42\x04\x07\x0b\x51\xc4\x8f\xa9\x10\xb7\x1c\xbc\x73\x4c\xf0\xcc\x15\x0a\x3b\xa6\xf9\x16\x2c\x1e\x66\x96\xc8\x2e\x1a\xb4\xb5\xd0\xa8\xbd\x22\xc2\xd1\x34\xc1\x45\x68\x46\xf4\x63\x92\x8a\x60\xb6\x95\x4e\xae\x15\xd2\xdb\xe0\xde\xe6\x28\xbe\x44\x41\x09\xa7\x52\x7b\xd4\x05\x45\x13\x6f\x38\x52\x90\x91\xbd\x81\x5a\x38\xca\x22\x2c\x4f\x2f\x0a\x0b\x18\x68\xc9\xf5\xe5\xaf\x97\xb7\x31\x4c\x0d\x74\x45\x8e\x63\x5a\x0f\xad\xa3\x35\xef\x8c\xcd\xe0\xda\xf8\x74\x5e\x12\x63\x34\x83\x52\x5a\xe7\xc3\xdc\x8c\x37\x4c\x44\x27\x37\xba\x94\x9b\xd6\x62\x91\x22\x57\x41\xb3\x70\x8b\x76\x0f\xb4\xa2\xc2\x30\xad\x6d\xd2\x29\xc8\xb5\xf2\x5c\x16\xa8\x3d\xa7\x6f\x7e\x8d\xc5\x9f\xca\x14\x8e\xf1\xcb\xe7\xd5\x1d\x14\xa8\xd0\x63\x38\x27\x73\xdc\x8e\xfb\x46\x9f\x0d\x27\xa4\x98\x99\xc1\x05\x0d\x66\x5d\x55\x78\x34\x3a\xb8\x74\x69\x6c\x3e\xb4\x78\x52\x2a\x0d\x2c\x4b\xb4\xa8\x7d\x6f\xab\x8c\x73\x3e\xcf\x53\x86\x06\xe9\x3d\xa7\x75\x72\xaf\x31\x18\x5b\xa0\xe5\x7f\x21\x37\x52\x3b\x16\xb9\x12\x5b\x42\xe1\x16\x0b\x8a\x4b\xf4\xa4\x30\xe0\x4c\xf6\xfd\x7d\x27\xba\x7b\xdd\x45\xab\xc6\x9a\xc7\x3d\x03\xfe\xe9\xfc\x53\x59\xd3\x6e\x42\x22\xa6\x89\x1d\xd6\xde\xee\x13\xdb\x1f\xcd\x40\xfa\x18\xfa\x02\x0f\x8a\x2c\x86\xd6\x3a\x60\x31\xc3\x85\x5b\xad\xc8\x07\x38\x8f\x6b\xe2\x50\x91\x4a\xc9\xc0\x62\x42\x45\xd1\x33\x2c\x5e\xde\x87\xca\xe5\xc8\x11\x49\xac\xd5\xcd\xbb\x8f\xab\xb3\x78\x18\xa3\xa1\x4b\xd8\x6f\x5e\x9f\x9c\x9d\xc4\x82\x65\xf0\x70\x7a\x76\x92\xc1\x95\x8e\x19\x63\x67\x6c\x31\xf4\x01\x36\x07\x4a\x7e\x97\x76\x58\x5b\xb3\x73\x94\x60\x2d\xff\x2c\x04\xd6\x5c\x55\xd8\x56\xf3\x41\x8d\x06\x65\x72\xa1\x2a\xe3\x3c\x63\x58\x72\x19\x44\xb9\x25\x0d\x39\x80\xae\x52\xfc\x2e\x38\xcb\x68\x96\x7c\x77\x27\x5d\xf5\x04\xba\xe2\xc9\x3e\xdf\x7e\xea\x88\x24\xeb\x3c\x52\xa4\x78\x6e\x56\x15\xb3\x64\x63\x03\xfb\xbc\x61\xd5\xb2\xb5\x23\xb3\xfc\xa6\x41\xf0\x31\x57\xad\x93\x5b\x54\xfb\x6f\x5a\x9d\x8c\xd2\x95\x36\x2c\xae\xd0\x7d\xce\x4c\x16\xd4\x90\x9b\x7a\x2d\xb5\x88\x96\x8b\x42\x7a\x63\xd3\x10\xae\xaf\x84\x67\x8e\x47\xf0\x49\xf2\x70\x12\x7f\x0a\x86\x29\xf1\xd3\x41\x89\x0d\x24\x01\x39\x10\x31\x4e\xf8\x8c\x41\xe1\x64\x15\xfc\xbd\x95\x16\x8b\x31\x54\x66\x47\x61\x86\xca\xdb\x81\xfe\x73\x41\x80\x43\x2b\x3c\xc6\xf0\x61\x34\xd5\x08\x4f\xec\x4d\x87\xee\xc1\x1e\x4e\xfa\x3f\xa0\x31\x37\xda\x5b\xa3\x62\x85\xa1\x0f\x81\x37\x05\x63\x0f\xc1\x78\x72\x36\xe5\x93\x37\xd6\x6c\xac\xe8\x2b\x96\x2e\x6a\x82\xf4\x0e\x55\x49\x67\x10\xbc\x41\x25\x8b\x02\x35\x13\x13\x99\x23\xc1\x8d\x0b\x18\xb6\x01\x1d\x8a\x74\x5c\x0a\xa9\xdc\x57\x98\x23\xd1\xa4\x6e\xb1\x0b\x9e\x54\x83\x36\x1c\xfc\x9e\x42\x45\x0c\x96\x09\xae\x18\x36\x89\xb9\x4d\x99\x0d\x6b\x87\xfd\x37\xe0\xed\xaa\x7c\x5a\x09\xd1\x1e\x8e\x6a\xb2\x0a\xb5\x4f\xb5\xfc\x3e\x56\x47\xa8\x7d\xf4\xb5\xd6\x51\x05\x56\x63\x6a\x32\x08\xe7\xc8\x3d\x43\x45\x9c\x36\xa3\x41\x73\xa1\x64\x8e\xe9\x09\x8d\x9b\x9f\xe1\xab\x57\x2f\x5e\xbd\x7e\x55\x88\xd3\x57\x27\x2f\x5e\x4e\xcf\xa6\xc5\x09\x9e\x9d\x97\xaf\x8a\xfc\xfc\xf4\xf5\xe9\xcb\x97\xcf\xcf\x4f\x9e\x17\x27\xc5\xb9\x10\xeb\x75\x51\x9c\x9f\x8a\xe9\x14\xcb\x97\xa7\xd3\x62\x7a\xf6\xe2\xb4\x78\x45\x27\xb8\x68\x05\xf1\x46\x91\x3f\x0c\x82\x64\x50\xd2\xd3\x7e\xe3\x2b\x63\x09\x8a\x5c\xaf\xd0\xc1\x17\xd7\x17\x7d\xea\x67\x74\x53\x51\x89\x9e\xe9\xa4\xc5\x92\xdb\x2e\xad\x50\x83\x4d\xa4\x83\xeb\x9b\x3b\x68\xac\xdc\x0a\x8f\x19\xdc\xfc\x89\x0f\x8c\x66\x50\x8b\x02\xfb\x62\x87\xf7\xe9\x76\xe9\x02\xab\x50\x0f\x31\xfd\x8b\x40\x4e\x53\x18\x1a\x3a\xfa\x1a\x2b\xc9\x7a\x26\x47\x1a\xcd\x7a\xb9\x3a\x73\xfe\x4b\x41\x69\x3c\x8c\x4a\xa1\x77\x71\x1d\xd0\x22\x7c\x17\x56\x89\xce\x7b\x66\xe5\x71\xec\x51\x50\xe8\x89\x0a\x55\x4a\x94\xf2\x03\x27\x0d\x98\xeb\x03\x60\x8c\xaa\xa8\x29\x02\x90\xd0\xfc\x6a\x7e\x18\xf2\xff\x05\xe9\x69\x2d\x8a\x86\xc7\x80\x3d\xc4\xe4\xc1\x81\xd8\xcb\x06\x47\x7a\xe2\x40\x07\xc9\x8c\x94\xff\x27\xd0\x61\x13\x46\xcd\xdf\xe8\xa3\x03\x0f\x45\x7a\xf2\xd8\xde\xd8\xf8\xfe\xf0\xec\xd3\x1f\xd3\xec\x21\x08\xad\x62\x95\x00\xcf\xb8\xa8\x2e\x8d\x52\x66\xc7\xd1\xb3\x49\xe1\xe2\x3b\x6f\x1c\x1b\x05\xba\xad\xd7\x94\x7c\x4b\xb0\xe8\x1a\xa3\x63\xb7\x64\x27\xa4\x67\x1b\x72\xfd\x58\x0b\x46\xfc\xd5\xf2\x7a\xc5\x25\x9a\xec\xda\x34\x92\x02\xa7\xb7\xa2\x40\x53\x52\xa8\x5c\xa3\xdf\x21\x86\x28\x26\xf2\xbc\xb5\x22\xdf\xd3\xe2\xf4\x9b\x8b\xbb\xae\xac\x73\x0d\x06\x32\x22\x1b\xed\x7e\x6f\x8d\x6d\xeb\x39\x17\xff\x8b\xe5\x15\x9b\x25\x02\x8b\x84\xc0\xc7\xbc\x12\x7a\x83\x40\x69\xc5\x65\xf0\x0b\x21\x84\x82\xb8\xb1\x75\x4a\x0f\x6f\xa5\x27\xda\xb7\xd8\xa2\x15\x1b\x1c\xf4\x1c\xd2\x64\x9a\xdb\x58\xb3\x95\x05\xda\x79\xe5\x7d\xe3\xde\x4c\x26\x5e\xe6\x0f\x68\x07\x0d\xbd\xcc\xd8\xcd\x44\x34\x92\x23\x56\x24\x5d\xc4\xe1\x06\xe1\xde\xa2\x12\x44\x98\xcb\x56\x33\xdc\x84\x92\x7e\x4f\xdb\x10\x1c\xbb\xbe\x0a\x47\x06\x3a\x6c\xf8\x15\xf2\xbc\xd4\x9b\x70\xe4\xd2\x51\x5a\x0c\xb1\x60\xd1\x34\xa8\x0b\x10\x94\xdc\xb9\xe5\x19\x4f\x44\xb1\x18\xc4\x86\x9e\xa4\x92\xbc\x6f\x0c\xf7\x44\x3a\x1b\xcd\x5a\x11\xa7\xce\xe3\xbf\x3f\x04\xa8\x64\x98\xbf\x04\xa7\xa9\xd3\x97\xe2\x0d\x6a\x36\xcb\x6a\xf5\x29\x15\x6a\x24\x5a\xef\xff\x3d\x36\x2b\xb9\xa9\xa8\xfa\xb3\x18\x14\x53\x20\x85\x64\xd9\x57\x73\x29\x74\x33\x22\xb9\x7b\x40\x4b\x0a\xb0\x58\x53\x98\xad\x45\x5e\x49\x8d\xc4\x0f\x28\xeb\x13\x63\x88\xb0\xa4\xcd\x29\x6f\x50\x1e\x27\x1d\x50\x31\x62\x34\x1e\xf1\x16\xb2\xff\x20\xfa\x85\x16\xca\x98\x62\x96\x6a\xb9\x86\x2c\xac\x90\x9d\x00\x3b\xa1\x54\x68\xc6\x3a\xa7\x02\x36\xee\xfa\xdd\xf6\xa9\xf6\xd1\x18\x0a\x59\xa1\x9c\x39\x88\x90\x8d\xf0\x15\x7b\x6f\xd7\xe1\xcb\xd1\x7a\x16\xe2\x01\xf7\x50\x4a\xc5\xad\x1a\xf2\x28\x16\x86\xde\xca\x92\x18\x03\xc6\x4d\xe9\x09\x0d\x9b\x4f\x68\xad\x89\x37\x13\xe7\x54\x46\x4f\xc3\xfb\x07\xdc\x7f\xfd\xfa\x01\xf7\x29\x9a\xf4\x78\x88\x2d\x1d\x58\x0b\x27\x73\x26\x27\x90\x5b\xa4\xa2\x53\x0a\xe5\xba\xf4\x40\x86\x93\x5f\x65\x13\x52\xea\x01\x9d\x79\x2a\xeb\xb1\x62\xf8\xa4\xa4\x1d\xe2\x06\x47\x14\x88\xaa\x79\x6b\x3c\xe6\x24\x7c\x67\xd2\x60\xe5\x0c\xae\xfc\xdf\x5d\x50\x21\x81\x64\x88\x91\x7e\x1b\x4e\x6c\x87\x8b\x52\x5d\xce\xd4\xa8\x2f\x4a\xc2\x46\xf4\xc2\xc7\xb2\x27\xf2\xcd\xd8\x9f\x0a\x97\x11\xc9\xc8\x8b\xe5\x15\xb3\x7d\xf1\x80\x89\xf8\x09\xdf\xe9\xa2\x63\x65\x6b\x24\x50\xa5\x32\x9f\x5e\x57\xf8\x08\xa8\x73\x53\x60\x01\xab\x0f\x8b\xd3\xb3\x73\xa8\x84\xab\xc0\x94\xb1\xc7\x2e\x72\x4f\x14\x2b\x2d\xd1\x7b\x41\x11\x81\x19\xb5\x11\xb1\x12\x37\xda\x55\x52\x11\x0f\x06\x27\xbd\xe3\x8c\xcc\xcc\x2a\xc0\x87\x79\x32\x03\x27\x83\x2f\x94\x09\x42\x0a\x7f\xa0\xc8\xc6\xf2\x12\xfd\x44\xe7\x7b\x70\xd2\xba\x69\x7a\xab\x9f\x91\x84\x78\x40\x37\x53\xfc\x67\xd9\x53\xf5\x91\x9b\xba\x11\x36\xc0\xba\x7b\x19\xca\xf6\x48\x4f\x45\x23\x13\x81\x4d\xfc\x54\x34\x32\xad\xfa\x5d\x08\xea\xc2\xd1\xa9\x84\xe2\x9b\x0a\x2f\xb7\xac\xb3\x01\x7e\xb9\x55\x25\x34\xa3\x22\x37\xe6\x41\x32\xba\xb1\xf8\x0a\xab\x77\xdc\xb3\x69\xac\xac\x85\xdd\x87\xe1\x22\x66\x32\x1f\x4d\x42\xff\xef\x50\xc2\x08\x38\xae\x51\xfa\x7e\x76\x40\x2c\xf3\x92\x03\x13\x12\x92\xe0\x0b\x42\x61\x42\x31\xdc\xe1\x37\x00\xe1\x98\xe7\x6d\x85\x6a\x63\xf7\x4c\xba\x68\x5a\xca\xd8\xad\xa7\xb4\xca\xb0\x15\x01\xa6\x32\x26\x9c\xbe\x54\xa5\x95\xc9\x70\x8a\x82\x61\x0c\xf5\xe1\x5e\x33\x1c\x87\xf6\xef\x4c\x1d\x42\xd9\xfe\xd8\xfd\x3b\x04\x48\x17\xec\x19\x74\x38\xff\xc7\x6f\xd7\x0f\xf7\xf5\xfb\x7f\xde\xff\xfc\xbe\xbe\xff\x70\x5d\xdd\x7f\xb8\xae\xfb\x67\xf7\x55\x7e\x7a\x5b\xdf\xd7\xef\x1f\xee\x37\xa9\xcb\x42\x98\xf5\x48\x65\x77\x6a\x63\xe7\x83\x96\x1b\xba\x31\x34\xe1\x42\xb0\xee\xd0\x43\x61\x09\x0b\xd9\xcc\x4f\x5f\x65\x2f\xce\xb2\xf3\x97\xd9\xf4\xe5\xd9\xf0\xf9\xf3\xd3\xec\xf4\xf9\xeb\x6c\x7a\xf2\x3a\x9b\x06\xa2\xf7\xee\xe6\x76\xc5\xf7\x83\x9c\x6d\x0a\x58\x77\xa5\x6a\x46\x32\xa4\x8e\x8c\xc3\x60\x8d\x3e\xf4\x79\x03\xa5\x50\x8e\xf6\xd5\x26\x37\xd6\x3d\x49\xf9\x43\xd6\xe8\x5a\xe2\x8c\xb5\xd8\xc7\xe7\x6a\x34\xe6\x7a\x22\x2a\xe9\xda\x64\x1c\x6f\x26\x24\x45\xf1\x48\x84\xc9\x2a\xc7\x4d\xa2\x10\x70\xe2\x26\xec\xa6\xa8\x8b\xc6\x48\xed\x1d\xa9\x2e\xaf\xd2\x88\xd0\xaf\x92\xe5\x7e\x34\x4b\x9d\xf6\xbf\xbb\x58\xf0\x84\x62\xcd\x63\x5f\xa6\x72\x21\x1f\xc4\x2e\xd1\x53\x62\xdc\x04\x2a\x42\x60\x8e\x37\x04\xb1\x5b\xcb\x37\x05\xd9\x68\x16\x0e\x11\xc5\x9f\xff\x18\xfe\xfc\x85\xb3\xe6\x5f\xc3\x4c\x2e\x03\x13\x39\xb4\x7f\x48\xe3\xc1\xc7\xc9\x60\x52\x0f\xd8\x23\xdf\x55\x09\xbd\x4f\xc6\x2a\xd2\x70\xbe\x43\x09\xd1\x90\x32\x15\x85\xbe\x74\xbb\x11\x4b\x1d\x2c\x20\x6f\xad\x45\x9d\x4b\xe4\x16\x35\x8a\xbc\x4a\x0d\xd0\x6c\x14\x71\x1a\x96\x9b\xbf\x7d\xf7\xe1\xf8\xc9\xdd\xbb\xd1\xec\xf0\xd1\xa7\xaf\x1f\xdd\x5f\x7e\xf5\xe8\xf2\xee\xc3\x0f\x31\x5c\xb8\xd1\x5a\xe8\x02\xde\xc7\x1b\xad\x55\x60\x60\x7f\x9d\x29\x3b\x2a\x48\xa2\x3d\x13\xba\x78\x76\x78\xd9\x16\x9b\x16\x5f\xbb\xae\xa1\xda\x37\xde\x8a\x85\xfe\xca\x70\xa2\xcc\xb1\xbb\x70\xec\xef\x2c\x8f\xef\xd4\xd6\x08\x22\xdd\x42\xb4\xae\xea\x6f\xb9\xc2\x95\x03\xc6\x55\xd3\x6d\xde\xe0\xc2\xd2\x57\xc6\xe1\x37\x96\xb2\xe8\xad\xc4\x6d\x00\xe9\xe1\xb5\xa0\xaf\x70\xcf\x17\xdf\x35\x05\xea\xfc\x81\x3c\x9c\xaf\x09\xaf\xfb\x86\x14\x87\x22\xb3\x43\x1b\xca\x91\x98\x51\x32\xb8\xed\x88\xb3\x74\x49\x39\xae\x32\xad\xe2\x0c\xd0\xb5\x32\xd7\x18\xd8\x07\x93\xea\xb5\x79\x0c\x4d\x4b\x01\xca\x78\x2a\x0b\xc3\xca\xe1\xd6\xc0\x70\xdd\x26\x5c\xd7\x26\x58\x07\x3b\x48\xbd\x61\xfe\xb6\x31\xa6\x80\x02\x85\xa2\x89\xf1\xdb\x98\x00\xd4\xc1\xcd\x5f\x77\x53\xfa\x84\xf1\xc2\x3d\xa3\x18\x5c\xf4\x04\x69\xd8\x8d\x42\xfc\x4a\xb4\xb4\x69\x6d\x43\x2a\xe5\xb2\x38\x7e\x20\xc3\x62\xf0\xbe\xc7\xa1\xbc\x5f\x8a\x1c\x3b\xac\x94\xb6\x4c\xa4\xa1\xeb\xc3\x49\x9b\xae\x33\x5c\xca\x4e\x4e\x97\xf4\xe8\xff\xce\xbd\xe5\x05\xae\xdb\xcd\x0f\xf1\x32\x5e\x19\x94\xd9\x6c\x08\x3c\x0a\xb7\xa8\x88\x0d\xff\xca\x5f\x0c\xf0\xcf\x60\xa5\xff\x2c\x68\x20\x55\x4a\xa5\x19\x13\xbd\x90\x39\x8e\x61\x27\x2c\x81\x6e\x0c\x68\xad\xb1\x63\xc8\xad\x64\xba\xf4\x5f\xa3\x19\xad\xc9\xf3\xe7\x34\xe5\x4f\xbe\xcb\x52\x66\xd3\x55\x42\xca\x6c\xbe\xfa\xa2\x67\xa2\xcc\xa6\xfb\x8c\x82\x5b\xac\xe9\x6e\x7d\xd0\xe7\xff\x70\x77\xb7\xec\x2e\xc8\x23\x07\x76\x19\x84\x39\xf1\xf1\x20\x62\x70\x63\xa4\x8f\xf8\x7c\x43\x3e\x68\xeb\x07\xfe\xd4\xdd\xc8\x1f\xad\x23\x75\xe8\x65\xd0\x50\x42\x12\x37\x2a\xbb\x0f\x9c\x84\x67\x8a\xf0\x66\x32\xe9\xea\x91\x37\xff\x16\xa7\x92\xf4\xff\x3e\x61\x4d\x4e\x1a\x7a\x16\x2e\x50\x63\xcd\x1b\x1b\x7c\x5c\xcf\x9d\x9f\x9c\xb3\xeb\x7c\xb1\xd2\x23\xbc\x5b\x7e\xee\x76\x8f\x51\xab\xff\x5c\x80\x8b\x01\x8a\x1a\x4d\x9b\x66\x4f\x7c\xdd\x0c\x3e\x0a\xcb\xe8\xf9\x7f\x07\x00\x00\xff\xff\xf6\x7c\x5d\x74\xcb\x27\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 10187, mode: os.FileMode(420), modTime: time.Unix(1576114212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
